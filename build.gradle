plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.flywaydb.flyway' version '10.17.3'
    id 'nu.studer.jooq' version '8.2.3'
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"

    id 'org.ajoberstar.grgit' version '5.2.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    if (project.name == "all") {
        archivesBaseName = 'yaci-store';
    } else
        archivesBaseName = 'yaci-store-' + project.name

    def commit_id=getCheckedOutGitCommitHash()
    if (project.version.endsWith("-SNAPSHOT")) {
        version = "${project.version}".replace("-SNAPSHOT", "-${commit_id}-SNAPSHOT")
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        implementation(libs.mapstruct)
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor(libs.mapstruct.processor)
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }

    compileJava {
        sourceCompatibility = '21'
        targetCompatibility = '21'

        options.compilerArgs += ["-Aproject=${project.group}/${project.name}", "-parameters"]
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

//    task sourceJar(type: Jar) {
////        archiveClassifier "sources"
//        from sourceSets.main.allJava
//    }

//    task javadocJar(type: Jar, dependsOn: javadoc) {
////        archiveClassifier "javadoc"
//        from javadoc.destinationDir
//    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    test {
        useJUnitPlatform()
    }
}

def commit_id=getCheckedOutGitCommitHash()
def final_version = project.version
if (project.version.endsWith("-SNAPSHOT")) {
    final_version = "${project.version}".replace("-SNAPSHOT", "-${commit_id}-SNAPSHOT")
}

task distZip(type: Zip) {
    dependsOn ':components:plugin-polyglot:build', ':applications:all:bootJar', ':applications:ledger-state:bootJar', ':applications:admin-cli:bootJar'

    if (gradle.taskGraph.hasTask(distZip)) {
        dependsOn build
    }

    print(final_version)

    def zipDirName ="yaci-store-${final_version}"
    def configDir = "config"
    def binDir = "bin"

    from('applications/all/build/libs') {
        include "yaci-store-${final_version}.jar"
        into(zipDirName)
        rename "yaci-store-${final_version}.jar", "yaci-store.jar"
    }

    from('applications/ledger-state/build/libs') {
        include "yaci-store-ledger-state-${final_version}.jar"
        into(zipDirName)
        rename "yaci-store-ledger-state-${final_version}.jar", "yaci-store-ledger-state.jar"
    }

    from('applications/admin-cli/build/libs') {
        include "yaci-store-admin-cli-${final_version}.jar"
        into(zipDirName)
        rename "yaci-store-admin-cli-${final_version}.jar", "yaci-store-admin-cli.jar"
    }

    from('components/plugin-polyglot/build/libs') {
        include "yaci-store-plugin-polyglot-${final_version}.jar"
        into(zipDirName + "/" + 'plugins')
        rename "yaci-store-plugin-polyglot-${final_version}.jar", "yaci-store-plugin-polyglot.jar"
    }

    from('components/plugin-polyglot/build/libs/plugin-libs') {
        include "*.jar"
        into(zipDirName + "/" + 'plugins/lib')
    }

    from('./') {
        into(zipDirName)
        include 'LICENSE'
    }

    from('./config') {
        include 'application.properties'
        include 'application-ledger-state.properties'
        include 'application-plugins.yml'
        into zipDirName + '/' + configDir
    }

    from('./bin') {
        include("*.sh", "*.bat")
        into zipDirName + '/' + binDir
        eachFile { file ->
            if (file.name.endsWith(".sh")) {
                file.mode = 0b111101101  // 755 in octal
            }
        }
    }

    archiveFileName = "yaci-store-${final_version}.zip"

    destinationDirectory = file("applications/build/dist")
}

task dockerZip(type: Zip) {
    def zipDirName ="yaci-store-docker-${final_version}"

    from('./') {
        into(zipDirName)
        include 'LICENSE'
    }

    from('./docker') {
        into(zipDirName)
        include '*.yml'
        include '*.sh'
        include 'env'
        include '.env'
    }

    from('./config') {
        include 'application.properties'
        include 'application-ledger-state.properties'
        include 'application-plugins.yml'
        into zipDirName
    }

    archiveFileName = "yaci-store-docker-${final_version}.zip"

    destinationDirectory = file("applications/build/dist")
}

def getCheckedOutGitCommitHash() {
    grgit.head().abbreviatedId
}
