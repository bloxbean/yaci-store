plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.flywaydb.flyway' version '10.17.3'
    id 'nu.studer.jooq' version '8.2.3'
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"

    id 'org.ajoberstar.grgit' version '5.2.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://central.sonatype.com/repository/maven-snapshots/"
        }
    }

    archivesBaseName = 'yaci-store-' + project.name

    def commit_id=getCheckedOutGitCommitHash()
    if (project.version.endsWith("-SNAPSHOT")) {
        version = "${project.version}".replace("-SNAPSHOT", "-${commit_id}-SNAPSHOT")
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        implementation(libs.mapstruct)
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor(libs.mapstruct.processor)
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }

    compileJava {
        sourceCompatibility = '21'
        targetCompatibility = '21'

        options.compilerArgs += ["-Aproject=${project.group}/${project.name}", "-parameters"]
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

//    task sourceJar(type: Jar) {
////        archiveClassifier "sources"
//        from sourceSets.main.allJava
//    }

//    task javadocJar(type: Jar, dependsOn: javadoc) {
////        archiveClassifier "javadoc"
//        from javadoc.destinationDir
//    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    test {
        useJUnitPlatform()
    }
}

def getCheckedOutGitCommitHash() {
    grgit.head().abbreviatedId
}

ext.ossrhUsername = System.getenv('MAVEN_USERNAME')
ext.ossrhPassword = System.getenv('MAVEN_PASSWORD')

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://central.sonatype.com/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}
