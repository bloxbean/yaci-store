{"/build_run":{"title":"Build Run","data":{"how-to-run#How to Run":"Pre-requisites: Java 21\nDownload the latest binary and property file from release page\nYou need to download yaci-store-all-<version>.jar and application.properties files\nCreate a sub folder config and copy application.properties file to config directory\nEdit application.properties file to configure your datasource and network details\nRun java -jar yaci-store-all-<version>.jar from the directory where you have copied the jar file.","build-from-source-and-run#Build from source and Run":"Pre-requisites: Java 21","build#Build":"$> git clone https://github.com/bloxbean/yaci-store\n$> cd yaci-store\n$> ./gradlew clean build","run#Run":"$> cd yaci-store\n$> edit config/application.properties //datasource, network details\n$> java -jar applications/all/build/libs/yaci-store-all-<version>.jar"}},"/design":{"title":"Design","data":{"goals#Goals":"Some of the high-level goals of Yaci Store are:\nProviding a Java library for creating scoped indexers.\nHandling the common logic required for data indexing.\nAllowing applications to select the data they wish to index.\nEnabling developers to filter data based on various conditions.\nPermitting developers to override default behaviors.\nManaging rollbacks.\nOffering an out-of-the-box application for indexing common data.","yaci-store---design#Yaci Store - Design":"","core#Core":"The core module is the backbone of Yaci Store. It is responsible for reading data from Cardano blockchain and broadcasting events.\nIt also monitors and records the current point in the database.\nEvents are published as Spring events, so developers can write their own Spring event listeners to listen these events and process them accordingly.","stores#Stores":"Each store is a specialized module designed for a specific data type or use case.A store has the ability to:\nListen to events published by the core module.\nProcess data.\nStore data in a persistent store.\nPublish derived events. (Optional)\nProvide REST endpoints to retrieve data (optional).\nEach of the above functionalities can be overridden by developers through the use of Spring Beans.Note: To simplify the rollback process, stores do not handle any data aggregation.","aggregates#Aggregates":"Aggregates are modules that handle different kind of data aggregation. They are responsible for aggregating data from different stores and persisting them in a persistent store.\nCurrently, the only available aggregate is \"Account\", which provides account balance related data. It depends on the \"utxo\" store and the event published by utxo store.\nBut status of this module is still experimental.","persistence#Persistence":"By default, Yaci Store uses a relational database to store data. The database schema is generated automatically by Flyway.\nSupported databases include: PostgreSQL, MySQL, H2An application can also use a custom persistence store by implementing a store's Storage api.","tx-submission#Tx Submission":"The \"submit\" module provides the ability to submit transactions to nodes directly, either through n2c or the submit API.","stores---components#Stores - Components":"A store is composed of the following components:1. Processor: A processor is responsible for processing data. It listens to events published by the core module and processes the data contained in the event. A processor can also publish derived events.\nFor example: UtxoProcessor in the utxo store listens to TransactionEvent and processes the UTxOs contained in the transaction. It also publishes AddressUtxo derived event for each UTxO.Developer can write their own processor by listening to events published by the core module.2. Storage: A storage defines the interface for storing data. The implementation of a storage api is responsible for storing data in a persistent store.\nBy default, Yaci Store uses a relational database to store data and each store provides a default implementation of corresponding storage api using JPA.This can be overridden by developers by implementing the storage api in consuming applications.3. Controller: A controller provides REST endpoints to retrieve store's data. It uses the storage api to retrieve data from the persistent store.\nOut of the box, Yaci Store provides some common REST endpoints for all stores. But, developers can implement their own REST endpoints.","handling-rollbacks#Handling Rollbacks":"Yaci Store follows a simply strategy to handle rollbacks. As store modules don't handle any data aggregation, the rollback handling becomes simple.\nEach table in a store maintains a slot column. When a processor received a RollbackEvent event, it deletes all the records with a slot greater than\nthe rollback slot mentioned in the event.But as aggregates handle data aggregation, the rollback handling becomes a bit complex. But with a simple strategy, we can handle rollbacks in aggregates as well.\nFor example, the Account module aggregates account balance. But instead of storing the account balance for an address in one record, balance snapshot is stored for a slot.\nAs we don't update existing records during aggregation, rollback can be handled by simply deleting all the records with a slot greater than the rollback slot mentioned in the event.If you are using Yaci Store as a library in your application with your own domain model and tables, you can follow the similar strategy to handle rollbacks.","idempotency#Idempotency":"Though Yaci Store ensures that the same event is not published more than once, it is possible that the same event is published more than once in some scenarios. All out-of-box\nmodules are idepotent. But if you are writing your own stores, you should make sure that your modules are idempotent.","yaci-store---sequential-block-processing#Yaci Store - Sequential Block Processing":"","yaci-store---parallel-block-processing#Yaci Store - Parallel Block Processing":""}},"/docker":{"title":"Run with Docker Compose","data":{"":"There are three out-of-the-box applications available in the Yaci Store repository:\nYaci Store Utxo Indexer : Includes Utxo Store, Epoch Store, and Submit component\nYaci Store All : Includes all stores\nYaci Store Aggregation : Aggregates account balances\nYou can run out-of-the-box applications with Docker Compose. The Docker Compose YAML files for the applications are inside\nthe docker folder in GitHub repository.\nPlease clone the repository to access the Docker Compose files.\nVerify compose yaml file are pointing to the correct application image version.","pre-requisites#Pre-requisites":"Docker","environment-files#Environment Files":"There are three configuration files available in docker folder:\nenv - Environment variables like JAVA_OPTS\napplication.properties - Contains application specific properties. (e.g; Cardano node host, port, database info, store configuration etc.)\napplication-aggr.properties - Contains Aggregation application specific properties.\nPlease configure Cardano Host, Port, and Protocol magic in the application.properties file.","docker-compose-files#Docker Compose Files":"In the following sections, we will use *-monolith.yml files. These files help to run both Postgres and the application\nthrough a single Docker Compose file. If you want to run the application with an external database, you can use application-specific\nDocker Compose files, such as yaci-store-all.yml, yaci-store-utxo-indexer.yml, or yaci-store-aggregation.yml.","db-indexes-after-initial-sync#DB Indexes (After Initial Sync)":"During the initial sync with the yaci-store-all or yaci-store-utxo-indexer apps, the app automatically removes all optional DB indexes\nto speed up the sync process. Once the sync is completed, you need to manually re-apply those missing indexes for faster queries.The SQL file of indexes that need to be re-applied can be found in the GitHub repository:\nYaci Store All App : create-index.sql\nUtxo Indexer App : create-index.sql","run-yaci-store-all-application#Run Yaci Store ALL application":"This application includes all stores.By default, the submit endpoint is disabled. You can refer to the Enable Submit Endpoint section for instructions on how to enable it.One of the advantages of Yaci Store is that you can decide what data to store. If you want to disable any specific store\nor its API endpoints, you have that flexibility.\nTo disable a specific store, you can set the store.<store_name>.enabled property to false in application.properties.\nTo disable a specific store's API endpoints, you can set the store.<store_name>.api-enabled environment variable to false in application.properties.\ndocker compose -f yaci-store-all-monolith.yml up -d\nYou can access swagger-ui at http://localhost:8080/swagger-ui/index.html\nNote:\nWhen a store is disabled, the store specific data will not be processed and stored in the database. However, the store specific tables will be created in the database.\nThis will be fixed in the future release.\nAccount Aggregation :\nIt also includes the account aggregation module, but it is disabled by default. Instead of enabling this module,\nit's recommended to run the aggregation-app separately for calculating account balances.","run-utxo-indexer-application#Run Utxo Indexer application":"The Utxo Indexer application consists of the utxo store, epoch store, and submit component.By default, the submit endpoint is disabled. You can refer to the Enable Submit Endpoint  section for instructions on how to enable it.\ndocker compose -f yaci-store-utxo-indexer-monolith.yml up -d","run-aggregation-app-to-calculate-account-balances#Run Aggregation App to calculate account balances":"Aggregation App is a separate application that calculates account balances by aggregating the UTXO store data.\ndocker compose -f yaci-store-aggregation-monolith.yml up -d","enable-submit-endpoint#Enable Submit Endpoint":"Both the yaci-store-all and yaci-store-utxo-indexer applications provide submit and script cost evaluation endpoints.\nHowever, these endpoints are disabled by default.In application.properties file :\nTo enable the submit endpoint, you need to configure the store.cardano.submit-api-url endpoint.\nTo enable both the submit and script cost evaluation endpoints, you need to set the store.cardano.ogmios-url.\nIf both submit api url and ogmios url are configured, submit api url will be used for tx submission and ogmios url will be used for script cost evaluation."}},"/getting-started/getting-started-2.0.0-beta1":{"title":"Getting Started with Yaci Store 2.0.0-beta1","data":{"":"Note: This documentation is for the 2.0.0-beta1 release. For the latest 2.x.x version, see the main Getting Started guide.\nThis was the first beta release of Yaci Store with ledger-state support. Yaci Store can now calculate and derive ledger state—such as rewards, ADAPot, and governance state—from on-chain data.Unlike DB Sync, which receives ledger events directly from a local Cardano Node (both implemented in Haskell), Yaci Store independently computes all required ledger state from the on-chain data itself.","status-of-ledger-state-data-accuracy-beta1#Status of Ledger State Data Accuracy (Beta1)":"Ledger State calculations include:\nEpoch Stake and Rewards\nADAPot values\nGovernance State (dRep distribution, Proposal Status, dRep Status)","reward-calculation-and-adapot-status#Reward Calculation and ADAPot Status":"Mainnet:\nADAPots and rewards match up to epoch 545.\nMismatch in epoch 546:\nTreasury: -0.065 ADA (-62,510 lovelace)\nReserves: 35.5 ADA (35,580,032 lovelace)\nNote: This could be due to an incorrect status for the New Constitution governance action.\nPreprod:\nADAPots and rewards match up to epoch 212 (current epoch at the time of writing).\nPreview:\nADAPots and rewards match up to epoch 916 (current epoch at the time of writing).\nA few dRep distribution mismatches (for 5 dReps) were found on the Preview network during some earlier epochs.\n🔎 Mismatch details for all public networks can be found here..⚠️ We also identified some incorrect DRep expiry values in Preprod and Preview. See issue #536.🛠 We will address these issues in the next beta and continue to monitor results alongside DB Sync and the Cardano Node for upcoming epochs.\nNote:If you're testing ledger-state calculation, we recommend starting with Preview or Preprod networks for this release.For mainnet, you may also need to tune your PostgreSQL configuration though the default config will work but will take longer.\nIn the next beta release we will provide the postgres configuration for mainnet sync.","known-issues-or-limitations#Known Issues or Limitations":"Performance of Reward Calculation on Mainnet\nLedger-state calculations currently happen during epoch transition.\nThat means rewards paid in epoch X are calculated during the transition from epoch X-1 to X.\nOn Mainnet, this takes around 20–40 minutes per transition (depends on your PostgreSQL resources).\nIn a future release, we plan to start reward calculation in epoch X-1 after the stability window, similar to how the Haskell node works.\nThis will reduce the computation load during epoch boundaries.","out-of-the-box-applications#Out-of-the-Box Applications":"","1-yaci-store-app#1. Yaci Store App":"The default indexer application, includes all modules.\nLedger-state calculation is disabled by default but can be enabled via profile.","2-ledger-state-app#2. Ledger State App":"Contains only the modules needed for ledger-state calculation.\nExcludes modules like metadata and script that are unnecessary for this purpose.","3-yaci-store-admin-cli-app#3. Yaci Store Admin CLI App":"CLI tool to apply optional indexes after sync is complete.\nOptional indexes improve API query performance and are not applied during initial sync.","types-of-distribution#Types of Distribution":"Yaci Store provides three types of distributions:\nYaci Store Zip Distribution (JARs)\nYaci Store Docker Distribution\nYaci Store Native (GraalVM) Distribution (Preview)","1-yaci-store-zip-distribution-jars#1. Yaci Store Zip Distribution (JARs)":"Filename: yaci-store-<version>.zipIncludes:\nyaci-store.jar\nyaci-store-ledger-state.jar\nConfig files (application.properties)","pre-requisites#Pre-requisites":"Java 21 or Java 24 (Recommended)\nYou can use sdkman to install Java 21 or 24.\nsdk install java 24.0.1-tem\nsdk use java 24.0.1-tem\nCheck if JAVA_HOME env variable is set correctly:\necho $JAVA_HOME","edit-config#Edit Config":"Edit application.properties to set the Cardano network and Database connection settings\nCheck the following properties and update them accordingly\nstore.cardano.host=preview-node.world.dev.cardano.org\nstore.cardano.port=30002\nstore.cardano.protocol-magic=2\nspring.datasource.url=jdbc:postgresql://localhost:5432/yaci_indexer?currentSchema=preview\nspring.datasource.username=user\nspring.datasource.password=password","usage#Usage":"To run Yaci Store (without ledger-state):\n./bin/start.sh\nTo enable ledger-state calculation with all other on-chain data:\n./bin/start.sh ledger-state\nTo run Ledger State App only:\n./bin/start-ledger-state.sh\nIf ledger state is enabled, verify the log message to ensure that ledger-state calculation is activeWhile running Yaci Store with ledger-state calculation enabled, you may see logs similar to the example below, indicating\nthat address balance calculation is active — which is required for ledger-state calculation.\n # of blocks written: 100, Time taken: 25 ms\nBlock No: 4746  , Era: Shelley\n### Starting account balance calculation upto block: 4846 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###\n # of blocks written: 100, Time taken: 28 ms\n Block No: 4846  , Era: Shelley\n### Starting account balance calculation upto block: 4946 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###","11-apply-optional-indexes#1.1 Apply Optional Indexes":"After the initial sync is complete:\n./bin/yaci-cli.sh\nThis launches the Admin CLI (yaci-store-admin-cli.jar). At the CLI prompt:\nyaci-store> apply-indexes","2-yaci-store-docker-distribution-beta1-method#2. Yaci Store Docker Distribution (Beta1 Method)":"Note: This is the legacy Docker distribution method for beta1. For the latest simplified Docker distribution, see the main Getting Started guide.\nThis ZIP includes Docker Compose files for:\nPostgreSQL\nYaci Store app\nLedger State app\nYou can choose between:\nMonolith setups (run both Postgres and indexer app)\nApp-specific setups (connect to an external DB)","usage-1#Usage":"Edit application.properties to configure network settings.\nCheck the following properties and update them accordingly\nstore.cardano.host=preview-node.world.dev.cardano.org\nstore.cardano.port=30002\nstore.cardano.protocol-magic=2\nStart containers:\nYaci Store with Postgres:\ndocker compose -f yaci-store-monolith.yml up\nYaci Store with Postgres with ledger-state calculation:\nEdit env file and uncomment the following property\nSPRING_PROFILES_ACTIVE=ledger-state\nRun Yaci Store with ledger state profile\ndocker compose -f yaci-store-monolith.yml up\nLedger State with Postgres:\ndocker compose -f yaci-store-ledger-state-monolith.yml up\nAccess PostgreSQL DB:\n./psql.sh postgres-compose.yml\nIf ledger state is enabled, verify the log message to ensure that ledger-state calculation is activeWhile running Yaci Store with ledger-state calculation enabled, you may see logs similar to the example below, indicating\nthat address balance calculation is active — which is required for ledger-state calculation.\n # of blocks written: 100, Time taken: 25 ms\nBlock No: 4746  , Era: Shelley\n### Starting account balance calculation upto block: 4846 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###\n # of blocks written: 100, Time taken: 28 ms\n Block No: 4846  , Era: Shelley\n### Starting account balance calculation upto block: 4946 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###","21-connects-to-an-external-postgresql-db#2.1 Connects to an external PostgreSQL DB":"Use docker compose file like yaci-store.yml or yaci-store-ledger-state.yml instead of *-monolith.yml if you want to connect to an external PostgreSQL DB.\nEdit yaci-store.yml or yaci-store-ledger-state.yml to comment the database configuration in docker compose yml.\n#    environment:\n#      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL:-jdbc:postgresql://yaci-store-postgres:5432/yaci_store?currentSchema=yaci_store}\n#      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-yaci}\n#      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-dbpass}\nEdit application.properties to set the database connection settings.\nMake sure to use the database host or IP address instead of localhost, as the Docker container will not be able to connect to the host using localhost.\nAlso, ensure that only the PostgreSQL configuration section is uncommented.\nspring.datasource.url=jdbc:postgresql://192.168.0.2:5432/yaci_indexer?currentSchema=preview\nspring.datasource.username=user\nspring.datasource.password=password","211-usage#2.1.1 Usage":"Yaci Store:\ndocker compose -f yaci-store.yml up\nYaci Store with ledger-state calculation:\nEdit env file and uncomment the following property\nSPRING_PROFILES_ACTIVE=ledger-state\nRun Yaci Store with ledger state profile\ndocker compose -f yaci-store.yml up\nLedger State with Postgres:\ndocker compose -f yaci-store-ledger-state.yml up","22-apply-indexes-after-sync#2.2 Apply Indexes After Sync":"Open admin-cli.sh and replace ${tag} with the actual version number and correct image name.\n(This is a known bug and will be fixed in the next release.)\nExample:\ndocker run -it --volume ./application.properties:/app/config/application.properties bloxbean/yaci-store-admin-cli:2.0.0-beta1\nEdit application.properties to set the database connection settings.\nMake sure to use the database host or IP address instead of localhost, as the admin-cli Docker container will not be able to connect to the host using localhost.\nAlso, ensure that only the PostgreSQL configuration section is uncommented.\nspring.datasource.url=jdbc:postgresql://192.168.0.142:54333/yaci_store?currentSchema=yaci_store\nspring.datasource.username=yaci\nspring.datasource.password=dbpass\nOnce sync is complete:\n./admin-cli.sh\nThis runs the Admin CLI in a container. Then, at the prompt:\nyaci-store> apply-indexes","3-yaci-store-native-graalvm-distribution-preview#3. Yaci Store Native (GraalVM) Distribution (Preview)":"Native binaries are available under a separate release tag:\n<version>-native (e.g., 2.0.0-beta1-native)","download-format#Download Format":"Look for platform-specific ZIP files in this format:\nyaci-store-<version>-<os>-<arch>-all.zip\nExample:\nyaci-store-2.0.0-beta1-linux-x64-all.zip\n⚠️ Only use the ZIP files ending with -all.\nIgnore files ending with n2c.","setup#Setup":"Extract the ZIP.\nEdit config/application.properties to configure:\nCardano network info (host/port/protocol magic)\nPostgreSQL connection settings\nRun the app:\n./yaci-store\nRun with ledger-state profile:\nSPRING_PROFILES_ACTIVE=ledger-state ./yaci-store"}},"/getting-started/getting-started-2.x.x":{"title":"Getting Started with Yaci Store 2.x.x","data":{"current-version-200-beta4#Current Version: 2.0.0-beta4":"This is the latest beta release of Yaci Store with ledger-state support. Yaci Store can now calculate and derive ledger state—such as rewards, ADAPot, and governance state—from on-chain data.Unlike DB Sync, which receives ledger events directly from a local Cardano Node (both implemented in Haskell), Yaci Store independently computes all required ledger state from the on-chain data itself.","status-of-ledger-state-data-accuracy#Status of Ledger State Data Accuracy":"Ledger State calculations include:\nEpoch Stake and Rewards\nADAPot values\nGovernance State (dRep distribution, Proposal Status, dRep Status)","reward-calculation-and-adapot-status#Reward Calculation and ADAPot Status":"ADAPot values are matching for all 3 public networks up to the recent epochs:\nMainnet: Up to epoch 569 (recent epoch when this document was written)\nPreprod: Up to epoch 227 (recent epoch when this document was written)\nPreview: Up to epoch 989 (recent epoch when this document was written)\nWe will update this section with any discrepancies for future mismatches.","governance-state-data#Governance State Data":"Governance action proposal statuses are correctly calculated up to recent epochs and are matching. However, there are some known mismatches in dRep distribution and dRep active_until values. For a detailed breakdown and the latest mismatch reports, see the 2.0.0-beta3 mismatch summary. We will be working on fixing these in future releases.","beta-release-status#Beta Release Status":"Except for governance state and reward data, all other stores are production-ready and can be used in production environments.While governance state data calculation has some mismatches, and even though reward/epoch stake data are all correct, we are keeping the beta label for now. There will be a few more beta releases while we fix all issues in the ledger state. Meanwhile, you can use other stores (UTXO, block, metadata, etc.) in production.","out-of-the-box-applications#Out-of-the-Box Applications":"","1-yaci-store-app#1. Yaci Store App":"The default indexer application, includes all modules.\nLedger-state calculation is disabled by default but can be enabled via profile.","2-yaci-store-admin-cli-app#2. Yaci Store Admin CLI App":"CLI tool to apply optional indexes after sync is complete.\nOptional indexes improve API query performance and are not applied during initial sync.","types-of-distribution#Types of Distribution":"Yaci Store provides three types of distributions:\nYaci Store Docker Distribution\nYaci Store Zip Distribution (JARs)\nYaci Store Native (GraalVM) Distribution (Preview)","1-yaci-store-docker-distribution#1. Yaci Store Docker Distribution":"This distribution provides scripts to help you easily run Yaci Store, perform administrative tasks, and monitor the system using Prometheus and Grafana.The Docker distribution includes:\nPostgreSQL\nYaci Store app\nLedger State app\nAdmin CLI tools\nMonitoring stack (Prometheus + Grafana)","-contents#📦 Contents":"Key files and directories included:\n.\n├── yaci-store.sh            # Start/stop Yaci Store application\n├── admin-cli.sh             # Admin operations (apply-indexes, rollback, etc.)\n├── monitoring.sh            # Start/stop Prometheus + Grafana monitoring stack\n├── compose/\n│   ├── .env                         # Environment file (contains Docker image tag)\n│   ├── yaci-store-monolith.yml      # Compose file for Yaci Store and PostgreSQL\n│   ├── admin-cli-compose.yml        # Compose file for admin CLI container\n│   ├── monitoring.yml               # Compose file for monitoring stack\n│   └── ...\n├── config/                          # Yaci Store configuration files mounted inside the container\n│   ├── env                          # Environment file (e.g., to enable ledger-state profile)\n│   ├── application.properties\n│   ├── application-ledger-state.properties\n│   ├── application-plugins.yml\n├── plugin-scripts/          # Folder for custom plugin scripts (mounted inside the container)\n├── grafana/                 # Grafana configuration and dashboards\n├── prometheus/              # Prometheus configuration","-edit-configuration#🔧 Edit Configuration":"Before starting Yaci Store, update the Cardano node connection details.Edit the following values in config/application.properties:\nstore.cardano.host=preprod-node.world.dev.cardano.org\nstore.cardano.port=30000\nstore.cardano.protocol-magic=1","-running-yaci-store#🚀 Running Yaci Store":"Use yaci-store.sh to start, stop, or view logs of the Yaci Store application.","-start#✅ Start":"./yaci-store.sh start\nThis starts Yaci Store and PostgreSQL in the background.\n📍 Yaci Store API runs on http://localhost:8080\n📖 API docs (Swagger UI): http://localhost:8080/swagger-ui/index.html","-stop-both-yaci-store-and-postgresql#🛑 Stop both Yaci Store and PostgreSQL":"./yaci-store.sh stop","-stop-only-yaci-store-postgresql-stays-running#🛑 Stop only Yaci Store (PostgreSQL stays running)":"./yaci-store.sh stop:yaci-store","-view-logs#📋 View logs":"./yaci-store.sh logs                # Logs from all containers\n./yaci-store.sh logs:yaci-store     # Only Yaci Store logs\n./yaci-store.sh logs:db             # Only PostgreSQL logs","️-enable-ledger-state-profile#⚙️ Enable Ledger-State Profile":"To run Yaci Store with the ledger-state profile:\nOpen the env file under the config/ folder.\nUncomment or add the following line:\nSPRING_PROFILES_ACTIVE=ledger-state\nStart the application:\n./yaci-store.sh start\nIf ledger state is enabled, verify the log message to ensure that ledger-state calculation is activeWhile running Yaci Store with ledger-state calculation enabled, you may see logs similar to the example below, indicating\nthat address balance calculation is active — which is required for ledger-state calculation.\n # of blocks written: 100, Time taken: 25 ms\nBlock No: 4746  , Era: Shelley\n### Starting account balance calculation upto block: 4846 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###\n # of blocks written: 100, Time taken: 28 ms\n Block No: 4846  , Era: Shelley\n### Starting account balance calculation upto block: 4946 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###","️-admin-operations#🛠️ Admin Operations":"Use admin-cli.sh to run administrative tasks like applying indexes or rolling back to a specific epoch.","️-apply-indexes#▶️ Apply Indexes":"./admin-cli.sh apply-indexes\n⚠️ This applies database indexes required for optimal read performance from API endpoints.\n🕒 Important: Only run this after the full sync is complete. Applying indexes early can significantly slow down the sync process.","-rollback#🔄 Rollback":"./admin-cli.sh rollback-data --epoch <epoch_no>\n⚠️ Important: Before performing rollback, you must stop Yaci Store but keep PostgreSQL running. Use the following command to stop only Yaci Store:\n./yaci-store.sh stop:yaci-store\nIn interactive mode, you'll be prompted to confirm the rollback operation.","-monitoring-prometheus--grafana#📊 Monitoring (Prometheus + Grafana)":"Use monitoring.sh to start or stop the monitoring stack.","-start-monitoring-services#✅ Start monitoring services":"./monitoring.sh start\n📍 Prometheus: http://localhost:9090\n📍 Grafana: http://localhost:3000\nDefault login: admin / changeme","-stop-monitoring-services#🛑 Stop monitoring services":"./monitoring.sh stop","-accessing-postgresql#🔍 Accessing PostgreSQL":"To connect to the PostgreSQL database running in Docker, you can use the included psql.sh script:\n./psql.sh\nThis script opens an interactive psql session inside the running PostgreSQL container.\n💡 Make sure the Yaci Store stack is already running (./yaci-store.sh start) before using this script.","2-yaci-store-zip-distribution-jars#2. Yaci Store Zip Distribution (JARs)":"Filename: yaci-store-<version>.zipIncludes:\nyaci-store.jar\nyaci-store-ledger-state.jar\nConfig files (application.properties)","pre-requisites#Pre-requisites":"Java 21 or Java 24 (Recommended)\nYou can use sdkman to install Java 21 or 24.\nsdk install java 24.0.1-tem\nsdk use java 24.0.1-tem\nCheck if JAVA_HOME env variable is set correctly:\necho $JAVA_HOME","edit-config#Edit Config":"Edit application.properties to set the Cardano network and Database connection settings\nCheck the following properties and update them accordingly\nstore.cardano.host=preview-node.world.dev.cardano.org\nstore.cardano.port=30002\nstore.cardano.protocol-magic=2\nspring.datasource.url=jdbc:postgresql://localhost:5432/yaci_indexer?currentSchema=preview\nspring.datasource.username=user\nspring.datasource.password=password","usage#Usage":"To run Yaci Store (without ledger-state):\n./bin/start.sh\nTo enable ledger-state calculation with all other on-chain data:\n./bin/start.sh ledger-state\nIf ledger state is enabled, verify the log message to ensure that ledger-state calculation is activeWhile running Yaci Store with ledger-state calculation enabled, you may see logs similar to the example below, indicating\nthat address balance calculation is active — which is required for ledger-state calculation.\n # of blocks written: 100, Time taken: 25 ms\nBlock No: 4746  , Era: Shelley\n### Starting account balance calculation upto block: 4846 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###\n # of blocks written: 100, Time taken: 28 ms\n Block No: 4846  , Era: Shelley\n### Starting account balance calculation upto block: 4946 ###\n \tTotal Stake Address Balance records 0, Time taken to save: 0\n \tTime taken to delete stake address balance history: 0\n### Total balance processing and saving time 1 ###","21-apply-optional-indexes#2.1 Apply Optional Indexes":"After the initial sync is complete:\n./bin/yaci-cli.sh\nThis launches the Admin CLI (yaci-store-admin-cli.jar). At the CLI prompt:\nyaci-store> apply-indexes","3-yaci-store-native-graalvm-distribution-preview#3. Yaci Store Native (GraalVM) Distribution (Preview)":"Native binaries are available under a separate release tag:\n<version>-native (e.g., 2.0.0-beta4-native)","download-format#Download Format":"Look for platform-specific ZIP files in this format:\nyaci-store-<version>-<os>-<arch>-all.zip\nExample:\nyaci-store-2.0.0-beta4-linux-x64-all.zip\n⚠️ Only use the ZIP files ending with -all.\nIgnore files ending with n2c.","setup#Setup":"Extract the ZIP.\nEdit config/application.properties to configure:\nCardano network info (host/port/protocol magic)\nPostgreSQL connection settings\nRun the app:\n./yaci-store\nRun with ledger-state profile:\nSPRING_PROFILES_ACTIVE=ledger-state ./yaci-store","known-issues-or-limitations#Known Issues or Limitations":"Performance of Reward Calculation on Mainnet\nLedger-state calculations currently happen during epoch transition.\nThat means rewards paid in epoch X are calculated during the transition from epoch X-1 to X.\nOn Mainnet, this takes around 20–40 minutes per transition (depends on your PostgreSQL resources).\nIn a future release, we plan to start reward calculation in epoch X-1 after the stability window, similar to how the Haskell node works.\nThis will reduce the computation load during epoch boundaries.\nNote:If you are running ledger-state calculation for mainnet, you may also need to tune your PostgreSQL configuration though the default config will work but will take longer.\nIn the next beta release we will provide the postgres configuration for mainnet sync."}},"/":{"title":"Index","data":{"whats-yaci-store#What's Yaci Store?":"Yaci Store is a modular Java library for Java developers who are keen on constructing their custom indexer solutions.\nIts architecture ensures that every component within Yaci Store is accessible both as a standalone Java library and a\ncorresponding Spring Boot starter.Developers have the flexibility to select the specific modules that align with their project requirements.Supported Databases (Out-of-box) : PostgreSQL, MySQL, H2","yaci-store-application#Yaci Store application":"Yaci Store also offers an out-of-box application that indexes commonly-used data sets using the available modules.","yaci-store-modules#Yaci Store Modules":"The modules in Yaci Store are divided into three main categories:\nCore Modules\nStores\nAggregates","1-core-modules#1. Core Modules":"Core modules serve a critical purpose. They read data directly from Cardano blockchain and then publish various domain-specific events.\nSince these events are essentially Spring events, developers have the freedom to write their own Spring event listeners.\nThis allows them to tap into these events and process them accordingly. In addition to this, the core module monitors and records\nthe current point in the database.Major core modules include:\ncore\ncommon\nevents\nEvents published by core modules:\nBlockEvent\nBlockHeaderEvent\nByronEbBlockEvent\nByronMainBlockEvent\nRollbackEvent\nTransactionEvent\nMintBurnEvent\nScriptEvent\nCertificateEvent\nGenesisBlockEvent\nAuxDataEvent\nGovernanceEvent\nDerived Events: Events published by stores\nAddressUtxoEvent\nTxAssetEvent\nTxMetadataEvent\nDatumEvent\nTxScriptEvent","2-stores#2. Stores":"A \"store\" in Yaci Store is a specialized module designed for a specific data type or use case. Each store has a set of capabilities:\nEvent Listening: Listen to events published by the core module.\nData Processing: Processes event data.\nData Persistence: Saves processed data to a dedicated persistence store.\nREST Endpoints: Optionally provides REST endpoints for data retrieval.\nAvailable Store Implementations:\nutxo: Focuses on UTxOs, extracting them from transaction data.\nblock: Dedicated to handling and storing block data.\ntransaction: Takes care of transaction data.\nassets: Manages data related to asset minting and burning.\nmetadata: Retrieves and processes metadata events.\nscript: Deals with the ScriptEvent, get datums and redeemers.\nstaking: Handles from stake address registration to pool registration and more.\nmir: All about Mir data.\nepoch: Stores protocol params proposals and epoch protocol params. It also fetches protocol parameters from nodes via n2c.\ngovernance: Manages governance on-chain data.\nAdditional Modules:\nsubmit: Enables transaction submissions to nodes, either through n2c or the submit API.\nEach of the mentioned stores is available as a Spring Boot starter. This means that integrating a specific store into your\napplication is as straightforward as adding its Spring Boot starter as a dependency.","3-aggregates#3. Aggregates":"Aggregates are modules that handle different kind of data aggregation. They are responsible for aggregating data from different stores and persisting them in a persistent store.\nCurrently, the only available aggregate is \"Account\" , which provides account balance related data. It depends on the \"utxo\" store and the event published by utxo store.","yaci-store-spring-boot-starters#Yaci Store Spring Boot Starters":"Each module in Yaci Store is available as a Spring Boot starter. This means that integrating a specific module into your\napplication is as straightforward as adding its Spring Boot starter as a dependency. This ensures that developers can\neasily integrate Yaci Store into their Spring Boot applications with required modules and minimal configuration.Available Starters:\nyaci-store-spring-boot-starter : This is the core starter that includes all the core modules. This starter includes libraries\nrequired to fetch data from the blockchain and publish events.\nyaci-store-utxo-spring-boot-starter : This starter includes the UTXO store and related configuration including db migration scripts.\nyaci-store-block-spring-boot-starter : This starter includes the block store and related configuration including db migration scripts.\nyaci-store-transaction-spring-boot-starter : This starter includes the transaction store and related configuration including db migration scripts.\nyaci-store-assets-spring-boot-starter : This starter includes the assets store and related configuration including db migration scripts.\nyaci-store-metadata-spring-boot-starter : This starter includes the metadata store and related configuration including db migration scripts.\nyaci-store-script-spring-boot-starter : This starter includes the script store and related configuration including db migration scripts.\nyaci-store-staking-spring-boot-starter : This starter includes the staking store and related configuration including db migration scripts.\nyaci-store-mir-spring-boot-starter : This starter includes the mir store and related configuration including db migration scripts.\nyaci-store-epoch-spring-boot-starter : This starter includes the protocol params module and related configuration including db migration scripts.\nyaci-store-governance-spring-boot-starter : This starter includes governance store and related configuration including db migration scripts.\nyaci-store-account-spring-boot-starter : This starter includes the account aggregate and related configuration including db migration scripts.\nyaci-store-submit-spring-boot-starter : This starter includes the submit module and related configuration including db migration scripts. Submit module is used to submit transactions to nodes.\nyaci-store-remote-spring-boot-starter : This starter includes remote module.\nyaci-store-admin-spring-boot-starter : This starter includes admin module."}},"/ledger-state-mismatches":{"title":"Ledger state mismatch Summary","data":{"":"Last updated: 2025-04-28This document summarizes known mismatches identified in the Ledger state calculations of Yaci Store.","preview#Preview":"","drep-distribution-mismatches#DRep Distribution Mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t736\t\t\tAmount mismatch (vs DB Sync)\t730–731\t\t\tAmount mismatch (vs DB Sync)\t685–757\t\t\tAmount mismatch (vs DB Sync)\t682–684\t\t\tOnly in Yaci Store (not in Db Sync)\t681–683\t\t\tOnly in Yaci Store (not in Db Sync)\t743–762\t\t\tFound in DB Sync but not in Yaci Store\t709–830\t\t\tAmount mismatch (vs DB Sync)","drep-active_until-mismatches#DRep active_until mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t682–684\t\t\tOnly in Yaci Store (not in Db Sync)\t681–683\t\t\tOnly in Yaci Store (not in Db Sync)\t743–762\t\t\tFound in DB Sync but not in Yaci Store","preprod#Preprod":"","drep-active_until-mismatches-1#DRep active_until mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t207\t\t\tactive until is different from db sync\t\t207\t\t\tactive until is different from db sync\t207\t\t\tactive until is different from db sync\t\nIn epoch 224, a bug occurred that caused many active_until values to be one epoch earlier than those in db-sync.","mainnet#Mainnet":"","drep-distribution-mismatches-1#DRep Distribution Mismatches":"[TODO] (No specific mismatch file yet.)","treasury-and-reserves-adapot-mismatches#Treasury and Reserves (ADAPot) Mismatches":"Treasury and Reserves match up to epoch 545, a Mismatch was detected for epoch 546:\nEpoch\tCategory\tDB Sync Value\tYaci Store Value\t546\tTreasury\t1,703,528,717,038,308\t1,703,528,716,975,798\t546\tReserves\t7,323,776,141,502,598\t7,323,776,177,082,630","governance-proposal-status-mismatches#Governance Proposal Status Mismatches":"The following mismatch was detected when comparing Governance Action Status between Yaci Store and DB Sync (via Koios):\nGovernance Action\tDB Sync Status\tYaci Store Status\tNew Constitution (tx hash )\tEnacted (epoch 542)\tExpired\t\nNote: Yaci Store marked the action as Expired, while DB Sync/Koios recognized it as Enacted at epoch 542."}},"/ledger-state-mismatches/2-0-0-beta1/2-0-0-beta1":{"title":"Ledger state mismatch Summary","data":{"":"Last updated: 2025-04-28This document summarizes known mismatches identified in the Ledger state calculations of Yaci Store.","preview#Preview":"","drep-distribution-mismatches#DRep Distribution Mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t736\t\t\tAmount mismatch (vs DB Sync)\t730–731\t\t\tAmount mismatch (vs DB Sync)\t685–757\t\t\tAmount mismatch (vs DB Sync)\t682–684\t\t\tOnly in Yaci Store (not in Db Sync)\t681–683\t\t\tOnly in Yaci Store (not in Db Sync)\t743–762\t\t\tFound in DB Sync but not in Yaci Store\t709–830\t\t\tAmount mismatch (vs DB Sync)","mainnet#Mainnet":"","drep-distribution-mismatches-1#DRep Distribution Mismatches":"[TODO] (No specific mismatch file yet.)","treasury-and-reserves-adapot-mismatches#Treasury and Reserves (ADAPot) Mismatches":"Treasury and Reserves match up to epoch 545, a Mismatch was detected for epoch 546:\nEpoch\tCategory\tDB Sync Value\tYaci Store Value\t546\tTreasury\t1,703,528,717,038,308\t1,703,528,716,975,798\t546\tReserves\t7,323,776,141,502,598\t7,323,776,177,082,630","governance-proposal-status-mismatches#Governance Proposal Status Mismatches":"The following mismatch was detected when comparing Governance Action Status between Yaci Store and DB Sync (via Koios):\nGovernance Action\tDB Sync Status\tYaci Store Status\tNew Constitution (tx hash )\tEnacted (epoch 542)\tExpired\t\nNote: Yaci Store marked the action as Expired, while DB Sync/Koios recognized it as Enacted at epoch 542."}},"/ledger-state-mismatches/2-0-0-beta3/2-0-0-beta3":{"title":"Ledger state mismatch Summary","data":{"":"Last updated: 2025-07-11This document summarizes known mismatches identified in the Ledger state calculations of Yaci Store.","preview#Preview":"","drep-distribution-mismatches#DRep distribution mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t736\t\t\tAmount mismatch (vs DB Sync)\t730–731\t\t\tAmount mismatch (vs DB Sync)\t685–757\t\t\tAmount mismatch (vs DB Sync)\t682–684\t\t\tOnly in Yaci Store (not in Db Sync)\t681–683\t\t\tOnly in Yaci Store (not in Db Sync)\t743–762\t\t\tFound in DB Sync but not in Yaci Store\t709–830\t\t\tAmount mismatch (vs DB Sync)","drep-active_until-mismatches#DRep active_until mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t682–684\t\t\tOnly in Yaci Store (not in Db Sync)\t681–683\t\t\tOnly in Yaci Store (not in Db Sync)\t743–762\t\t\tFound in DB Sync but not in Yaci Store","preprod#Preprod":"","drep-active_until-mismatches-1#DRep active_until mismatches":"Epoch(s)\tDRep ID\tDRep Hash\tNote\t207\t\t\tactive until is different from db sync\t\t207\t\t\tactive until is different from db sync\t207\t\t\tactive until is different from db sync","mainnet#Mainnet":"","drep-distribution-mismatches-1#DRep distribution mismatches":"📊 Comprehensive Analysis AvailableWe have conducted an extensive analysis of DRep stake distribution across epochs 506-569 on Cardano mainnet. The comprehensive monitoring has successfully identified specific areas for improvement.Key Findings:\nOnly 143 unique DReps show discrepancies\nDetailed classification completed with 90.9% being minor low-severity cases\n📋 Raw Data Source:\n📄 Raw Mismatch Data - Complete raw data file used for the analysis (10,036 lines)\n📋 Detail:\n📝 Complete DRep List - All 143 DReps with detailed breakdown","drep-active_until-mismatches-2#DRep active_until mismatches":"For detail, check the DRep active_until mismatches page."}},"/ledger-state-mismatches/2-0-0-beta3/mainnet/_hidden/drep-distribution-analysis":{"title":"DRep Distribution Mismatches Analysis","data":{"":"💡 Note: All stake amounts in this analysis are measured in lovelace (1 ADA = 1,000,000 lovelace).","executive-summary#Executive Summary":"Analysis of DRep stake distribution mismatches between yaci-store and cardano-db-sync on Cardano mainnet, covering epochs 506-569.","️-key-findings#⚠️ Key Findings":"Distinct DReps Affected: 143 distinct DReps\nEpochs Analyzed: 64 epochs (506-569)\nEpochs with Issues: 62/64\nCritical Issues: 10 DReps with >10% deviation, max deviation 99.61%","overview#Overview":"Comprehensive comparison of DRep stake distribution data between yaci-store indexer and cardano-db-sync across 64 consecutive epochs (506-569) on Cardano mainnet.","data-summary-table#Data Summary Table":"Metric\tValue\tDescription\tTotal Epochs\t64\tEpochs 506-569 analyzed\tEpochs with Matches\t2\tPerfect agreement between systems\tEpochs with Mismatches\t62\tAt least one discrepancy found\tMismatch Rate\t96.9%\tPercentage of epochs with issues\tTotal DRep Mismatches\t4,800\tIndividual mismatch entries\tDistinct DReps\t143\tDistinct DReps with stake differences\tAbstain Mismatches\t62\tEpochs with abstain amount differences\tNo Confidence Mismatches\t53\tEpochs with no-confidence amount differences","severity-breakdown#Severity Breakdown":"","-high-severity-dreps-10-deviation#🔴 High Severity DReps (>10% deviation)":"#\tDRep ID\tMax Deviation\tEpochs Affected\tAvg Deviation\t1\tdrep1yf9z2h2v...vvwwjr\t99.61%\t6\t94.97%\t2\tdrep1yfvaqxp...apm33\t90.94%\t14\t87.58%\t3\tdrep1y28fu7x...u00em\t90.13%\t14\t83.74%\t4\tdrep1yt6tfms...wgam\t90.01%\t9\t44.05%\t5\tdrep1y2m0g4r...qwqp\t72.25%\t62\t6.84%\t6\tdrep1yfpx6k5...wyf8\t64.32%\t48\t15.69%\t7\tdrep1ygny6qf...rjw8\t61.87%\t29\t39.18%\t8\tdrep1y2dpty...gpp3\t39.23%\t48\t8.50%\t9\tdrep1yfcdzu...qye5\t22.25%\t14\t22.17%\t10\tdrep1yg8vjs...4xxc\t10.41%\t48\t4.45%","-medium-severity-dreps-1-10-deviation#🟡 Medium Severity DReps (1-10% deviation)":"#\tDRep ID\tMax Deviation\tEpochs Affected\tAvg Deviation\t11\tdrep1yf2jzhu...n7ns\t6.90%\t53\t1.19%\t12\tdrep1yg6l8sz...yr0m\t1.80%\t4\t1.72%\t13\tdrep1y25xtvu...uqdp\t1.49%\t53\t0.61%","-low-severity-dreps-1-deviation#🟢 Low Severity DReps (<1% deviation)":"Count: 130 DReps\nMax Deviation Range: 0.001% - 0.772%\nTypical Impact: Minimal stake discrepancies","most-critical-drep-analysis#Most Critical DRep Analysis":"","1-most-problematic-drep1yf9z2h2v433ysezypurlrw8hfd9a3jfs4mj7esd0rwxnpasvvwwjr##1 Most Problematic: drep1yf9z2h2v433ysezypurlrw8hfd9a3jfs4mj7esd0rwxnpasvvwwjr":"Hash: \nMaximum Deviation: 99.61%\nAverage Deviation: 94.97%\nEpochs Affected: 6 (513-518)","2-most-persistent-drep1y2m0g4r66pyaw3p7u454wc0p4f0ygm8ueaev0mgd3tvwm7sskqwqp##2 Most Persistent: drep1y2m0g4r66pyaw3p7u454wc0p4f0ygm8ueaev0mgd3tvwm7sskqwqp":"Hash: \nMaximum Deviation: 72.25%\nEpochs Affected: 62/64 (most persistent)","deviation-formula--examples#Deviation Formula & Examples":"","calculation-method#Calculation Method":"Deviation % = |DB_Sync_Amount - Indexer_Amount| / max(DB_Sync_Amount, Indexer_Amount) × 100","real-examples-from-actual-data#Real Examples (from actual data)":"","high-severity-example#High Severity Example":"Epoch: 518DRep:  Sync Amount: 1,462,022,999,461 lovelace (~1,462,023 ADA)Indexer Amount: 208,554,827,625 lovelace (~208,555 ADA)Deviation = |1,462,022,999,461 - 208,554,827,625| / 1,462,022,999,461 × 100 = 85.73%","medium-severity-example#Medium Severity Example":"Epoch: 569DRep:  Sync Amount:  32,073,571,553,788 lovelace (~32,073,572 ADA)Indexer Amount:  32,074,564,381,465 lovelace (~32,074,564 ADA)Deviation = |32,073,571,553,788 - 32,074,564,381,465| / 32,074,564,381,465 × 100 = 0.003%"}},"/ledger-state-mismatches/2-0-0-beta3/mainnet/_hidden/drep-distribution-summary":{"title":"DRep Mismatch Summary","data":{"final-statistics#Final Statistics":"Metric\tValue\tTotal Mismatches\t4,800\tUnique DReps\t143\tEpochs Analyzed\t64\tMismatch Rate\t96.9%","severity-breakdown#Severity Breakdown":"","quick-overview-table#Quick Overview Table":"Severity\tCount\t% of Total\tMax Deviation Range\tHIGH (>10%)\t10\t7.0%\t10.41% - 99.61%\tMEDIUM (1-10%)\t3\t2.1%\t1.49% - 6.90%\tLOW (<1%)\t130\t90.9%\t0.001% - 0.772%\tTOTAL\t143\t100%","top-10-critical-dreps-10-deviation#Top 10 Critical DReps (>10% Deviation)":"Rank\tDRep ID (Full)\tHash (Full)\tMax Dev %\tEpochs\tAvg Dev %\t1\t\t\t99.61%\t6\t94.97%\t2\t\t\t90.94%\t14\t87.58%\t3\t\t\t90.13%\t14\t83.74%\t4\t\t\t90.01%\t9\t44.05%\t5\t\t\t72.25%\t62\t6.84%\t6\t\t\t64.32%\t48\t15.69%\t7\t\t\t61.87%\t29\t39.18%\t8\t\t\t39.23%\t48\t8.50%\t9\t\t\t22.25%\t14\t22.17%\t10\t\t\t10.41%\t48\t4.45%"}},"/ledger-state-mismatches/2-0-0-beta3/mainnet/drep-active-until-detail":{"title":"DRep Active Until Mismatches","data":{"":"The following table lists DRep Hashes with mismatches in active_until values between DB Sync and Yaci Store for the specified epochs, including the specific active_until values of dreps.\nEpoch(s)\tDRep ID\tDRep Hash\tDB Sync\tYaci Store\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t556\t555\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t537\t-\t\t555\t556\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t565\t-\t\t583\t584\t566\t-\t\t583\t585\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t585\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t585\t566\t-\t\t583\t585\t566\t-\t\t583\t584\t566\t-\t\t583\t585\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t584\t566\t-\t\t583\t584","-summary-statistics#📊 Summary Statistics":"","key-metrics#Key Metrics":"Metric\tValue\tDescription\tTotal Mismatch Entries\t50\tIndividual mismatch records in the table\tDistinct DRep Hashes\t38\tUnique DRep hashes with active_until discrepancies\tEpochs Affected\t3\tEpochs 537, 565, 566","breakdown-by-epoch#Breakdown by Epoch":"Epoch\tDRep Mismatches\tNote\t537\t21\tAll have +1 difference (DB Sync: 555/556, Yaci Store: 556/555)\t565\t12\tAll have +1 difference (DB Sync: 583, Yaci Store: 584)\t566\t17\tMixed differences (+1 and +2)\t\nData source: Yaci Store and Cardano DB Sync from epochs 506-569"}},"/ledger-state-mismatches/2-0-0-beta3/mainnet/drep-distribution-detail":{"title":"Complete DRep Details - All 143 DReps","data":{"summary-statistics#Summary Statistics":"Metric\tValue\tDetails\tTotal Unique DReps\t143\tDReps with stake mismatches\tTotal Mismatch Entries\t4,800\tIndividual discrepancies\tAnalysis Period\t64 epochs\tEpochs 506-569\tWorst Case\t99.61% deviation\tNear-total stake loss","severity-distribution#Severity Distribution":"Level\tCount\t%\tDescription\t🔴 High Critical (>50%)\t7\t4.9%\tMassive stake discrepancies\t🔴 High (10%-50%)\t3\t2.1%\tMajor stake issues\t🟡 Medium (1%-10%)\t3\t2.1%\tModerate discrepancies\t🟢 Low (<1%)\t130\t90.9%\tMinor differences","complete-drep-table-143-entries#Complete DRep Table (143 entries)":"Note:\nEpochs shown as ranges (e.g., 513→518 = epochs 513,514,515,516,517,518)\nDeviation % = |DB_Sync_Amount - Indexer_Amount| / max(DB_Sync_Amount, Indexer_Amount) × 100\n#\tDRep ID\tHash\tMax Dev%\tAvg Dev%\tEpochs Affected\tEpoch Ranges\t1\t\t\t🔴 99.610%\t94.966%\t6\t513→518\t2\t\t\t🔴 90.941%\t87.576%\t14\t508→521\t3\t\t\t🔴 90.133%\t83.736%\t14\t508→521\t4\t\t\t🔴 90.007%\t44.050%\t9\t530→538\t5\t\t\t🔴 72.254%\t6.835%\t62\t508→569\t6\t\t\t🔴 64.319%\t15.692%\t48\t522→569\t7\t\t\t🔴 61.867%\t39.182%\t29\t509→537\t8\t\t\t🔴 39.229%\t8.495%\t48\t522→569\t9\t\t\t🔴 22.254%\t22.171%\t14\t508→521\t10\t\t\t🔴 10.411%\t4.446%\t48\t522→569\t11\t\t\t🟡 6.903%\t1.190%\t53\t517→569\t12\t\t\t🟡 1.801%\t1.722%\t4\t518→521\t13\t\t\t🟡 1.486%\t0.607%\t53\t517→569\t14\t\t\t🟢 0.772%\t0.259%\t50\t520→569\t15\t\t\t🟢 0.586%\t0.585%\t13\t553→565\t16\t\t\t🟢 0.553%\t0.553%\t1\t542\t17\t\t\t🟢 0.467%\t0.353%\t7\t530→536\t18\t\t\t🟢 0.338%\t0.020%\t55\t515→569\t19\t\t\t🟢 0.312%\t0.215%\t45\t525→569\t20\t\t\t🟢 0.300%\t0.300%\t11\t526→536\t21\t\t\t🟢 0.299%\t0.079%\t37\t533→569\t22\t\t\t🟢 0.266%\t0.042%\t59\t511→569\t23\t\t\t🟢 0.265%\t0.080%\t48\t522→569\t24\t\t\t🟢 0.241%\t0.136%\t48\t522→569\t25\t\t\t🟢 0.241%\t0.237%\t32\t538→569\t26\t\t\t🟢 0.240%\t0.203%\t40\t530→569\t27\t\t\t🟢 0.204%\t0.048%\t11\t534→538, 564→569\t28\t\t\t🟢 0.147%\t0.111%\t9\t513→521\t29\t\t\t🟢 0.142%\t0.073%\t43\t527→569\t30\t\t\t🟢 0.124%\t0.071%\t49\t521→569\t31\t\t\t🟢 0.086%\t0.027%\t33\t517→547, 550→551\t32\t\t\t🟢 0.079%\t0.022%\t52\t518→569\t33\t\t\t🟢 0.077%\t0.030%\t27\t541→567\t34\t\t\t🟢 0.074%\t0.010%\t58\t512→569\t35\t\t\t🟢 0.065%\t0.004%\t54\t516→569\t36\t\t\t🟢 0.059%\t0.014%\t50\t520→569\t37\t\t\t🟢 0.055%\t0.012%\t60\t510→569\t38\t\t\t🟢 0.055%\t0.006%\t42\t528→569\t39\t\t\t🟢 0.049%\t0.012%\t51\t519→569\t40\t\t\t🟢 0.041%\t0.017%\t61\t509→569\t41\t\t\t🟢 0.039%\t0.023%\t53\t517→569\t42\t\t\t🟢 0.039%\t0.025%\t50\t520→569\t43\t\t\t🟢 0.037%\t0.031%\t18\t552→569\t44\t\t\t🟢 0.030%\t0.012%\t60\t510→569\t45\t\t\t🟢 0.026%\t0.025%\t3\t522→524\t46\t\t\t🟢 0.025%\t0.003%\t48\t522→569\t47\t\t\t🟢 0.024%\t0.013%\t52\t518→569\t48\t\t\t🟢 0.023%\t0.010%\t46\t524→569\t49\t\t\t🟢 0.022%\t0.007%\t59\t511→569\t50\t\t\t🟢 0.021%\t0.004%\t32\t511→542\t51\t\t\t🟢 0.020%\t0.003%\t34\t536→569\t52\t\t\t🟢 0.019%\t0.016%\t41\t529→569\t53\t\t\t🟢 0.018%\t0.008%\t59\t510→511, 513→569\t54\t\t\t🟢 0.016%\t0.007%\t44\t526→569\t55\t\t\t🟢 0.015%\t0.004%\t23\t547→569\t56\t\t\t🟢 0.014%\t0.011%\t37\t533→569\t57\t\t\t🟢 0.013%\t0.013%\t40\t530→569\t58\t\t\t🟢 0.012%\t0.003%\t62\t508→569\t59\t\t\t🟢 0.011%\t0.009%\t47\t523→569\t60\t\t\t🟢 0.011%\t0.011%\t25\t545→569\t61\t\t\t🟢 0.011%\t0.011%\t15\t555→569\t62\t\t\t🟢 0.010%\t0.002%\t56\t514→569\t63\t\t\t🟢 0.010%\t0.003%\t40\t530→569\t64\t\t\t🟢 0.010%\t0.004%\t39\t531→569\t65\t\t\t🟢 0.009%\t0.009%\t4\t522→525\t66\t\t\t🟢 0.009%\t0.001%\t45\t525→569\t67\t\t\t🟢 0.009%\t0.003%\t31\t539→569\t68\t\t\t🟢 0.008%\t0.006%\t31\t518→525, 547→569\t69\t\t\t🟢 0.008%\t0.008%\t1\t530\t70\t\t\t🟢 0.007%\t0.007%\t1\t545\t71\t\t\t🟢 0.006%\t0.002%\t61\t509→569\t72\t\t\t🟢 0.006%\t0.006%\t29\t541→569\t73\t\t\t🟢 0.005%\t0.002%\t48\t522→569\t74\t\t\t🟢 0.005%\t0.004%\t35\t535→569\t75\t\t\t🟢 0.004%\t0.002%\t54\t516→569\t76\t\t\t🟢 0.004%\t0.003%\t48\t522→569\t77\t\t\t🟢 0.004%\t0.003%\t3\t523→525\t78\t\t\t🟢 0.004%\t0.003%\t44\t526→569\t79\t\t\t🟢 0.003%\t0.000%\t20\t522→523, 538→555\t80\t\t\t🟢 0.003%\t0.001%\t28\t542→569\t81\t\t\t🟢 0.002%\t0.001%\t52\t518→569\t82\t\t\t🟢 0.002%\t0.000%\t36\t522→527, 540→569\t83\t\t\t🟢 0.002%\t0.001%\t26\t524→549\t84\t\t\t🟢 0.002%\t0.001%\t41\t529→569\t85\t\t\t🟢 0.002%\t0.002%\t37\t533→569\t86\t\t\t🟢 0.002%\t0.002%\t20\t542→561\t87\t\t\t🟢 0.002%\t0.002%\t22\t548→569\t88\t\t\t🟢 0.001%\t0.000%\t54\t516→569\t89\t\t\t🟢 0.001%\t0.000%\t53\t517→569\t90\t\t\t🟢 0.001%\t0.001%\t3\t523→525\t91\t\t\t🟢 0.001%\t0.001%\t46\t524→569\t92\t\t\t🟢 0.001%\t0.000%\t46\t524→569\t93\t\t\t🟢 0.001%\t0.001%\t45\t525→569\t94\t\t\t🟢 0.001%\t0.001%\t41\t529→569\t95\t\t\t🟢 0.001%\t0.000%\t38\t532→569\t96\t\t\t🟢 0.001%\t0.001%\t32\t538→569\t97\t\t\t🟢 0.001%\t0.001%\t18\t540→557\t98\t\t\t🟢 0.001%\t0.000%\t29\t541→569\t99\t\t\t🟢 0.001%\t0.001%\t1\t543\t100\t\t\t🟢 0.000%\t0.000%\t53\t517→569\t101\t\t\t🟢 0.000%\t0.000%\t49\t521→569\t102\t\t\t🟢 0.000%\t0.000%\t48\t522→569\t103\t\t\t🟢 0.000%\t0.000%\t48\t522→569\t104\t\t\t🟢 0.000%\t0.000%\t48\t522→569\t105\t\t\t🟢 0.000%\t0.000%\t46\t524→569\t106\t\t\t🟢 0.000%\t0.000%\t46\t524→569\t107\t\t\t🟢 0.000%\t0.000%\t45\t525→569\t108\t\t\t🟢 0.000%\t0.000%\t11\t526→536\t109\t\t\t🟢 0.000%\t0.000%\t44\t526→569\t110\t\t\t🟢 0.000%\t0.000%\t41\t529→569\t111\t\t\t🟢 0.000%\t0.000%\t41\t529→569\t112\t\t\t🟢 0.000%\t0.000%\t41\t529→569\t113\t\t\t🟢 0.000%\t0.000%\t1\t530\t114\t\t\t🟢 0.000%\t0.000%\t39\t531→569\t115\t\t\t🟢 0.000%\t0.000%\t38\t532→569\t116\t\t\t🟢 0.000%\t0.000%\t37\t533→569\t117\t\t\t🟢 0.000%\t0.000%\t35\t535→569\t118\t\t\t🟢 0.000%\t0.000%\t1\t536\t119\t\t\t🟢 0.000%\t0.000%\t34\t536→569\t120\t\t\t🟢 0.000%\t0.000%\t34\t536→569\t121\t\t\t🟢 0.000%\t0.000%\t33\t537→569\t122\t\t\t🟢 0.000%\t0.000%\t32\t538→569\t123\t\t\t🟢 0.000%\t0.000%\t32\t538→569\t124\t\t\t🟢 0.000%\t0.000%\t31\t539→569\t125\t\t\t🟢 0.000%\t0.000%\t31\t539→569\t126\t\t\t🟢 0.000%\t0.000%\t31\t539→569\t127\t\t\t🟢 0.000%\t0.000%\t19\t540→558\t128\t\t\t🟢 0.000%\t0.000%\t2\t541→542\t129\t\t\t🟢 0.000%\t0.000%\t29\t541→569\t130\t\t\t🟢 0.000%\t0.000%\t28\t542→569\t131\t\t\t🟢 0.000%\t0.000%\t26\t544→569\t132\t\t\t🟢 0.000%\t0.000%\t26\t544→569\t133\t\t\t🟢 0.000%\t0.000%\t8\t544→551\t134\t\t\t🟢 0.000%\t0.000%\t24\t546→569\t135\t\t\t🟢 0.000%\t0.000%\t4\t548→551\t136\t\t\t🟢 0.000%\t0.000%\t22\t548→569\t137\t\t\t🟢 0.000%\t0.000%\t22\t548→569\t138\t\t\t🟢 0.000%\t0.000%\t18\t552→569\t139\t\t\t🟢 0.000%\t0.000%\t14\t556→569\t140\t\t\t🟢 0.000%\t0.000%\t11\t559→569\t141\t\t\t🟢 0.000%\t0.000%\t10\t560→569\t142\t\t\t🟢 0.000%\t0.000%\t7\t563→569\t143\t\t\t🟢 0.000%\t0.000%\t6\t564→569\t\nData source: Yaci Store and Cardano DB Sync from epochs 506-569"}},"/other-configurations":{"title":"Other Configurations","data":{"other-configurations#Other configurations":"Each store implementation in yaci-store has its own configuration options. We will try to highlight a few key configurations here.\nThese store-specific configurations can be set in the application.properties file.","pruning-configuration#Pruning Configuration":"Sometimes you may not want to store all historical data in a store. If you are using yaci-store as a library, you can customize it\nto only store specific data in your own custom storage implementation. However, if you want to delete historical data from a store database, you can use the pruning configuration.Currently, pruning configuration is only supported for the following stores. In the future, we will add support for other stores as well.\nutxo\ntransaction\nBy default, pruning is disabled for all stores.","utxo-pruning#Utxo Pruning":"To enable utxo pruning, you can set the following configurations in the application.properties file.\nstore.utxo.pruning-enabled=true\nstore.utxo.pruning.interval=600\nThe above configuration will run utxo pruning every 600 seconds.There is also another configuration, store.utxo.pruning-safe-blocks, which can be used to specify the number of safe blocks to keep in the store.\nBy default, this is set to 2160 blocks, same as the security parameter in Cardano mainnet.","transaction-pruning#Transaction Pruning":"To enable transaction pruning, you can set the following configurations in the application.properties file.\nstore.transaction.pruning-enabled=true\nstore.transaction.pruning.interval=86400","epoch-stake-pruning#Epoch Stake Pruning":"To enable epoch stake pruning, you can set the following configurations in the application.properties file.\nstore.adapot.epoch-stake-pruning-enabled=true\nstore.adapot.epoch-stake-pruning-interval=86400\nThe above configuration will run transaction pruning every 86400 seconds or 1 day.There is also another configuration, store.adapot.epoch-stake-safe-epochs, which can be used to specify the number of safe epochs to keep in the store.\nBy default, this is set to 4 epochs.","reward-pruning#Reward Pruning":"To enable reward pruning, add the following configurations to your application.properties file:\nstore.adapot.reward-pruning-enabled=true\nstore.adapot.reward-pruning-interval=86400\nThe above configuration will run reward pruning every 86400 seconds (1 day).You can also specify how many safe slots to keep in the reward table using:\nstore.adapot.reward-pruning-safe-slots=43200\nBy default, this is set to 43200 slots. Reward records are only eligible for pruning if:\nThe reward's slot is less than or equal to the latest completed reward calculation job slot minus this safe slot threshold.\nThere exists a withdrawal for the same address, where the withdrawal's slot is greater than the reward's slot and less than the current pruning slot.\nRewards that have not been withdrawn (i.e., do not have a matching withdrawal after their slot) will never be pruned.\nReward pruning will only remove reward records that have already been withdrawn (i.e., there is a withdrawal after the reward's slot for the same address). Rewards that have not been withdrawn will never be pruned.","transaction-witness-saving#Transaction Witness Saving":"The transaction store supports configurable saving of witness data. This feature allows you to enable or disable the saving of transaction witnesses in the database,\nwhich can help reduce storage requirements if witness data is not required for your use case.\nBy default, saving of transaction witness data is disabled.\nstore.transaction.save-witness=false","auto-restart-configuration#Auto-Restart Configuration":"Yaci-store includes an auto-restart feature that automatically handles recoverable sync errors, such as IntersectionNotFound errors that can occur after network disconnections and node rollbacks.The auto-restart system uses an event-driven architecture to detect sync issues and restart the sync process with proper backpressure controls.\n# Auto-restart configuration (enabled by default)\nstore.auto-restart.enabled=true\nstore.auto-restart.debounce-window-ms=30000\nstore.auto-restart.max-attempts=5\nstore.auto-restart.backoff-base-ms=5000","configuration-options#Configuration Options":"store.auto-restart.enabled (default: true): Enable or disable the auto-restart feature\nstore.auto-restart.debounce-window-ms (default: 30000): Time window in milliseconds to prevent multiple restart attempts. If multiple restart events occur within this window, only the first one will be processed\nstore.auto-restart.max-attempts (default: 5): Maximum number of restart attempts before giving up and requiring manual intervention\nstore.auto-restart.backoff-base-ms (default: 5000): Base delay in milliseconds for exponential backoff between restart attempts","how-it-works#How It Works":"The auto-restart system automatically handles:\nIntersectionNotFound errors: When the node can't find a common intersection point after network issues\nHealth check failures: When the auto-recovery service detects sync problems\nThe system includes safeguards to prevent restart storms:\nDebouncing: Ignores rapid restart requests within the configured window\nExponential backoff: Increases delay between retry attempts (5s, 10s, 20s, 40s, 60s max)\nRetry limits: Stops trying after the maximum attempts are reached\nSuccess tracking: Resets the retry counter after 5 minutes of stable sync\nThe auto-restart feature is enabled by default since IntersectionNotFound is a valid scenario that should be handled automatically, especially in production environments.","auto-recovery-service#Auto-Recovery Service":"In addition to the auto-restart feature, yaci-store provides an auto-recovery service that monitors the overall health of the sync process and triggers restarts when health issues are detected.The auto-recovery service performs periodic health checks and publishes restart events when:\nConnection to the Cardano node is not alive\nSync process is in an error state\nGeneral sync health problems are detected\n# Auto-recovery service configuration (disabled by default)\nstore.admin.auto-recovery-enabled=false\nstore.admin.health-check-interval=120","configuration-options-1#Configuration Options":"store.admin.auto-recovery-enabled (default: false): Enable or disable the auto-recovery service\nstore.admin.health-check-interval (default: 120): Health check interval in seconds","how-auto-recovery-works#How Auto-Recovery Works":"The auto-recovery service:\nPeriodic Health Monitoring: Runs health checks at the configured interval\nConnection Monitoring: Checks if the connection to the Cardano node is alive\nError Detection: Monitors for sync errors and problematic states\nEvent Publishing: Publishes restart events that are handled by the auto-restart system\nThe auto-recovery service is disabled by default. It should only be enabled in environments where you want comprehensive health monitoring beyond just IntersectionNotFound errors. When enabled, it works together with the auto-restart system to provide robust sync reliability.","relationship-between-auto-restart-and-auto-recovery#Relationship Between Auto-Restart and Auto-Recovery":"Auto-Restart: Always enabled by default, handles specific recoverable errors like IntersectionNotFound\nAuto-Recovery: Disabled by default, provides broader health monitoring and triggers restarts for general health issues\nBoth systems work together through the same event-driven architecture\nAuto-recovery publishes events that are processed by the auto-restart system's backpressure controls","auto-sync-off#Auto Sync off":"Ideally, you should only have one write instance of yaci-store. However, if you want to set up multiple read-only yaci-store instances alongside one write instance,\nyou can disable auto-sync in the read-only instances. This way, the read-only instances will only read from the database and not write to it.\nstore.sync-auto-start=false","store-specific-application#Store specific application":"Yaci Store bundles all stores by default, and you can enable or disable stores by setting a store-specific enable flag in the application.properties file.\nThis makes it possible to have multiple instances of yaci-store with different stores enabled. These individual instances can write to their own separate databases with the default configuration.However, if you want to have multiple store-specific yaci-store applications writing to the same database, each application needs to maintain its own cursor in the cursor_ table.This is achievable by assigning a unique event publisher ID to each yaci-store application. This can be done by setting the following configuration in each application's application.properties file.\nstore.event-publisher-id=1000  //some unique id"}},"/plugins/context-variables":{"title":"Context Variables Overview","data":{"":"Built-in variables and utilities available in all plugin scripts","what-are-context-variables#What are Context Variables?":"Context variables are pre-defined objects that are automatically injected into your plugin scripts. They provide instant access to:\nDatabase operations\nHTTP client for API calls\nFile I/O operations\nState management\nConfiguration access\nNo imports or initialization needed - just use them directly in your MVEL, JavaScript, or Python plugins.\nNew to plugins? Check our Quick Reference for a concise overview of all variables.","available-variables#Available Variables":"","essential-variables#Essential Variables":"","named_jdbc---database-access-recommended#named_jdbc - Database Access (Recommended)":"Type: NamedParameterJdbcTemplate\nPurpose: Execute SQL queries with named parameters for better readability and safety.\n// Query with named parameters\nparams = [\"address\": ownerAddr];\nresult = named_jdbc.queryForMap(\n    \"SELECT COUNT(*) as count FROM address_utxo WHERE owner_addr = :address\",\n    params\n);\n📖 Full Database Guide →","http---http-client#http - HTTP Client":"Type: PluginHttpClient\nPurpose: Make HTTP requests with built-in JSON handling.\n// GET request\nresponse = http.get(\"https://api.example.com/data\")\nif (response.isSuccess()) {\n    data = response.asJson();\n}\n📖 Full HTTP Client Guide →","files---file-operations#files - File Operations":"Type: PluginFileClient\nPurpose: Read/write files with JSON and CSV support.\n// Read and write JSON\nconfig = files.readJson(\"config.json\");\nif (config.isSuccess()) {\n    settings = config.getData();\n    // Process...\n    files.writeJson(\"output.json\", results);\n}\n📖 Full File Operations Guide →","env---configuration-access#env - Configuration Access":"Type: Environment\nPurpose: Access environment variables and application properties.\n// Get configuration with defaults\napiUrl = env.getProperty(\"plugin.api.url\", \"http://localhost:8080\");\napiKey = env.getProperty(\"API_KEY\"); // Environment variable\n📖 Full Configuration Guide →","state--global_state---state-management#state & global_state - State Management":"Type: State\nPurpose: Plugin or global state with atomic operations.\nstate: Plugin-specific storage\nglobal_state: Shared across all plugins\n// Store progress\nstate.put(\"last_block\", blockNumber);\n// Atomic counter\ncount = state.increment(\"processed_count\");\n// Thread-safe set operations\nstate.addToSet(\"processed_txs\", txHash);\n📖 Full State Management Guide →","quick-examples#Quick Examples":"// Count transactions for an address\nparams = [\"addr\": \"addr1...\"];\nresult = named_jdbc.queryForMap(\n    \"SELECT COUNT(*) as cnt FROM tx WHERE address = :addr\",\n    params\n);\ncount = result[\"cnt\"];\n// Send webhook\nresponse = http.postJson(\"https://webhook.site/id\", {\n        \"block\": blockNumber,\n        \"txCount\": transactions.size()\n    });\n// Track processing progress\nstate.put(\"last_block\", blockNumber);\ncount = state.increment(\"blocks_processed\");\nif (!state.addToSet(\"seen_txs\", txHash)) {\n    // Already processed this transaction\n    return;\n}\n// Read config and write results\nconfig = files.readJson(\"config.json\");\nif (config.isSuccess()) {\n    // Process with config...\n    files.writeJson(\"results.json\", data);\n    files.appendCsv(\"log.csv\", [[timestamp, status]]);\n}","language-support#Language Support":"All context variables work seamlessly across supported scripting languages:\n// MVEL - Direct and concise\nresult = named_jdbc.queryForMap(\"SELECT * FROM block WHERE number = :num\", [\"num\": 100]);\nstate.increment(\"counter\");\nresponse = http.get(\"https://api.example.com/data\");\n// JavaScript - Familiar syntax\nconst result = named_jdbc.queryForMap(\"SELECT * FROM block WHERE number = :num\", {num: 100});\nstate.increment(\"counter\");\nconst response = http.get(\"https://api.example.com/data\");\n# Python - Pythonic style\nresult = named_jdbc.queryForMap(\"SELECT * FROM block WHERE number = :num\", {\"num\": 100})\nstate.increment(\"counter\")\nresponse = http.get(\"https://api.example.com/data\")","best-practices#Best Practices":"Handle errors gracefully: Check operation results before using data\nUse atomic operations: For counters and concurrent access\nClean up resources: Remove old state data periodically\nNever log secrets: Mask sensitive configuration values","custom-variable-providers#Custom Variable Providers":"Extend the plugin framework by creating your own Variable Providers:","what-is-a-variable-provider#What is a Variable Provider?":"A Java class that implements the VariableProvider interface to add new variables to the plugin context.","how-to-create-one#How to Create One":"Implement the VariableProvider interface\nBundle as a JAR file\nPlace in plugins/ext-jars folder\nConfigure in application-plugins.yml\nUse the new variables in your plugins","example-use-cases#Example Use Cases":"Communication: Telegram, Slack, Email variables\nStorage: IPFS, S3, Redis variables\nBlockchain: Blockfrost, Koios API variables\nMonitoring: Prometheus, custom metrics variables\nVariable Providers must be thread-safe as they may be accessed concurrently.","next-steps#Next Steps":"Quick Start: See our Variable Quick Reference\nLearn by Example: Check Getting Started for complete plugin examples\nAdvanced Topics: Read the Plugin API Guide\nThe context variable system makes yaci-store's plugin framework powerful yet simple, providing everything you need to build sophisticated blockchain data processing pipelines."}},"/plugins/plugin-configuration-reference":{"title":"Plugin Configuration Reference","data":{"":"Complete Configuration Guide for Yaci-Store Plugins","table-of-contents#Table of Contents":"Configuration Overview\nGlobal Plugin Settings\nPlugin Type Configurations\nExtension Points Reference\nLanguage-Specific Configuration","configuration-overview#Configuration Overview":"Plugin configuration in yaci-store is managed through YAML files, primarily application-plugins.yml. The configuration follows a hierarchical structure that allows fine-grained control over plugin behavior.","configuration-file-structure#Configuration File Structure":"store:\n  plugins:\n    # Global settings\n    enabled: true\n    exit-on-error: false\n    # Plugin variable providers\n    variable-providers:\n      - com.example.CustomVariableProvider\n    # Global scripts\n    scripts:\n      - id: utilities\n        lang: python\n        file: /app/plugins/scripts/utilities.py\n        enable-pool: true\n      - id: utxo_utilities2\n        lang: python\n        file: /app/plugins/scripts/utxo.py\n        enable-pool: false\n    # Plugin initializers\n    init:\n      mvel:\n        name: \"System Initialization\"\n        script:\n          file: /app/plugins/scripts/init.mvel\n          function: initialize\n      python:\n        name: \"System Initialization\"\n        script:\n          file: /app/plugins/scripts/init.py\n          function: initialize\n    # Filter plugins\n    filters:\n      extension.point:\n        - name: \"Filter Name\"\n          lang: mvel\n          expression: \"condition\"\n    # Pre-action plugins\n    pre-actions:\n      extension.point:\n        - name: \"Pre Action Name\"\n          lang: python\n          script:\n            file: /path/to/script.py\n            function: function_name\n    # Post-action plugins\n    post-actions:\n      extension.point:\n        - name: \"Post Action Name\"\n          lang: js\n          inline-script: |\n            // JavaScript code\n    # Event handler plugins\n    event-handlers:\n      EventType:\n        - name: \"Event Handler Name\"\n          lang: mvel\n          script:\n            file: /path/to/handler.mvel\n            function: handleEvent","global-plugin-settings#Global Plugin Settings":"","basic-settings#Basic Settings":"store:\n  plugins:\n    enabled: true                    # Enable/disable plugin system\n    exit-on-error: false            # Continue on plugin errors","enabled#enabled":"Type: boolean\nDefault: false\nDescription: Master switch for the plugin system","exit-on-error#exit-on-error":"Type: boolean\nDefault: true\nDescription: Whether to stop processing on plugin errors\nValues:\ntrue: Stop processing and exit application on plugin errors\nfalse: Log errors and continue processing","variable-providers#Variable Providers":"Through variable providers, any custom variables can be exposed to plugin contexts. This is a powerful feature that can be used to inject additional functionality or data into plugin execution contexts.\nstore:\n  plugins:\n    variable-providers:\n      - com.example.DatabaseVariableProvider\n      - com.example.ConfigVariableProvider\n      - com.example.HttpClientVariableProvider\nCustom variable providers inject additional functionality into plugin contexts:\npublic class DatabaseVariableProvider implements VariableProvider {\n    @Override\n    public Object getValue() {\n        return Map.of(\n                        \"custom_db\", new CustomDBService(),\n                        \"telegram_client\", new TelegramClient()\n                );\n    }\n}\nCustom variable providers can be bundled in a JAR file and placed in the plugins/ext-jars directory. They can then be referenced in the configuration.","global-scripts#Global Scripts":"store:\n  plugins:\n    scripts:\n      - id: utilities\n        lang: python\n        file: /app/plugins/scripts/utilities.py\n        enable-pool: true\n      - id: utxo_utilities2\n        lang: python\n        file: /app/plugins/scripts/utxo.py\n        enable-pool: false\n    filters:\n      utxo.unspent.save:\n        - name: Filter UTXO\n          lang: python\n          script:\n            id: utxo_utilities2\n            function: highvalue_utxos\nGlobal scripts are defined once and can be referenced through ID in plugin configurations. They can be used across multiple plugins.Note: enable-pool is only applicable for Python and JavaScript scripts to allow parallel execution.","plugin-type-configurations#Plugin Type Configurations":"","filter-plugins#Filter Plugins":"Filter plugins control which data gets stored in the database.\nstore:\n  plugins:\n    filters:\n      # Extension point format: {store}.{target}.{action}\n      utxo.unspent.save:\n        - name: \"High Value UTXO Filter\"\n          lang: mvel\n          expression: \"lovelaceAmount > 1000000000\"\n          exit-on-error: false\n        - name: \"Policy ID Filter\"\n          lang: spel\n          expression: \"amounts.?[policyId == 'abc123'].size() > 0\"\n        - name: \"Complex Filter\"\n          lang: python\n          script:\n            file: /app/plugins/scripts/filters/complex_filter.py\n            function: filter_utxos","filter-configuration-options#Filter Configuration Options":"name: Human-readable plugin name\nlang: Plugin language (mvel, spel, js, python)\nexpression: Simple boolean expression (MVEL/SpEL only)\ninline-script: Script code embedded in configuration\nscript: External script file reference\nexit-on-error: Plugin-specific error handling override","pre-action-plugins#Pre-Action Plugins":"Pre-action plugins modify data before it's stored.\nstore:\n  plugins:\n    pre-actions:\n      metadata.save:\n        - name: \"Metadata Enrichment\"\n          lang: python\n          script:\n            file: /app/plugins/scripts/actions/enrich_metadata.py\n            function: enrich\n        - name: \"Field Normalization\"\n          lang: mvel\n          inline-script: |\n            modified_list = [];\n            for (item : items) {\n              if (item.label != null) {\n                ...\n              }\n              modified_list.add(item);\n            }\n            return modified_list;","post-action-plugins#Post-Action Plugins":"Post-action plugins execute after data is successfully stored.\nstore:\n  plugins:\n    post-actions:\n      transaction.save:\n        - name: \"Webhook Notification\"\n          lang: js\n          inline-script: |\n            if (items.length > 0) {\n              const payload = {\n                count: items.length,\n                timestamp: new Date().toISOString()\n              };\n              http.postJson(webhookUrl, payload);\n            }\n        - name: \"Cache Update\"\n          lang: python\n          script:\n            file: /app/plugins/scripts/actions/update_cache.py\n            function: update_transaction_cache","event-handler-plugins#Event Handler Plugins":"Event handler plugins react to blockchain events.\nstore:\n  plugins:\n    event-handlers:\n      BlockEvent:\n        - name: \"Block Statistics\"\n          lang: mvel\n          script:\n            file: /app/plugins/scripts/handlers/block_stats.mvel\n            function: processBlock\n      TransactionEvent:\n        - name: \"Transaction Monitor\"\n          lang: python\n          script:\n            file: /app/plugins/scripts/handlers/tx_monitor.py\n            function: handle_transaction_event\n      AddressUtxoEvent:\n        - name: \"Address Tracker\"\n          lang: js\n          inline-script: |\n            console.log(`Address UTXO event: ${event.tx_input_outputs.length} changes`);\n            // Process address changes","initializer-plugins#Initializer Plugins":"Initializer plugins run once during application startup.\nstore:\n  plugins:\n    initializers:\n      python:\n        name: \"Database Setup\"\n        script:\n          file: /app/plugins/scripts/init/db_setup.py\n          function: initialize_database\n        exit-on-error: true\n      mvel:\n        name: \"Configuration Validation\"\n        inline-script: |\n          System.out.println(\"Validating plugin configuration...\");\n          // Validation logic","extension-points-reference#Extension Points Reference":"","storage-extension-points#Storage Extension Points":"Storage extension points follow the pattern: {store}.{target}.{action}","utxo-store#UTXO Store":"# UTXO-related extension points\nutxo.unspent.save          # New unspent UTXOs\nutxo.spent.save            # Newly spent UTXOs","transaction-store#Transaction Store":"# Transaction-related extension points\ntransaction.save           # Transaction data\ntransaction.witness.save   # Transaction witnesses\ntransaction.withdrawal.save # Stake withdrawals","metadata-store#Metadata Store":"# Metadata extension points\nmetadata.save              # Transaction metadata","asset-store#Asset Store":"# Asset-related extension points\nasset.save                 # Asset mint/burn operations","block-store#Block Store":"# Block extension points\nblock.save                 # Block data","script-store#Script Store":"# Script-related extension points\nscript.save                # Script definitions\nscript.datum.save          # Datum storage\nscript.tx_script.save      # Transaction script executions","staking-store#Staking Store":"# Staking extension points\nstaking.key_registration.save    # Stake key registrations\nstaking.key_delegation.save      # Stake delegations\nstaking.pool_registration.save   # Pool registrations\nstaking.pool_retirement.save     # Pool retirements\nstaking.pool.save               # Pool status updates","governance-store-conway-era#Governance Store (Conway Era)":"# Governance extension points\ngovernance.gov_action_proposal.save   # Governance proposals\ngovernance.voting_procedure.save      # Voting procedures\ngovernance.drep_registration.save     # DRep registrations\ngovernance.drep.save                  # DRep status updates\ngovernance.delegation_vote.save       # Vote delegations\ngovernance.committee_registration.save # Committee registrations\ngovernance.committee_member.save      # Committee member updates\ngovernance.committee_deregistration.save # Committee deregistrations","event-types#Event Types":"Event handler plugins can listen to these event types:","system-events#System Events":"event-handlers:\n  RollbackEvent:            # Blockchain rollback\n  EpochChangeEvent:         # Epoch transitions\n  CommitEvent:              # Block commit events","blockchain-data-events#Blockchain Data Events":"event-handlers:\n  BlockEvent:               # New blocks\n  TransactionEvent:         # Transaction data\n  MintBurnEvent:            # Asset mint/burn operations\n  AuxDataEvent:             # Auxiliary data (metadata)\n  ScriptEvent:              # Smart contract data\n  CertificateEvent:         # Certificates\n  GovernanceEvent:          # Governance actions","store-specific-events#Store-Specific Events":"event-handlers:\n  TxnEvent:                 # Processed transactions\n  AddressUtxoEvent:         # Address UTXO changes\n  TxMetadataEvent:          # Processed metadata\n  DatumEvent:               # Datum data\n  TxScriptEvent:            # Script execution data\n  PoolRegistrationEvent:    # Pool registrations\n  StakeRegDeregEvent:       # Stake registration/deregistration","language-specific-configuration#Language-Specific Configuration":"","mvel-configuration#MVEL Configuration":"store:\n  plugins:\n    filters:\n      utxo.unspent.save:\n        - name: \"MVEL Expression Filter\"\n          lang: mvel\n          expression: |\n            lovelaceAmount > 1000000 &&\n            amounts.any { it.policy == \"target_policy\" }\n        - name: \"MVEL Script Filter\"\n          lang: mvel\n          script:\n            file: /app/plugins/scripts/complex_filter.mvel\n            function: filterFunction\n        - name: \"MVEL Inline Script\"\n          lang: mvel\n          inline-script: |\n            filtered = [];\n            for (item : items) {\n              if (item.lovelaceAmount > threshold) {\n                filtered.add(item);\n              }\n            }\n            return filtered;","mvel-features#MVEL Features":"Direct Java object access\nLambda expressions\nCollection operations\nRegex support\nMathematical operations","spel-configuration#SpEL Configuration":"store:\n  plugins:\n    filters:\n      metadata.save:\n        - name: \"SpEL Expression Filter\"\n          lang: spel\n          expression: \"label == '721' or label == '1967'\"\n        - name: \"SpEL Collection Filter\"\n          lang: spel\n          expression: \"body.contains('image') and body.length() > 100\"","spel-limitations#SpEL Limitations":"Expression-only (no script files)\nLimited to filter plugins\nSpring ecosystem integration","javascript-configuration#JavaScript Configuration":"store:\n  plugins:\n    event-handlers:\n      TransactionEvent:\n        - name: \"JavaScript Handler\"\n          lang: js\n          script:\n            file: /app/plugins/scripts/tx_handler.js\n            function: handleTransaction\n        - name: \"JavaScript Inline\"\n          lang: js\n          inline-script: |\n            function processTransactions(event, context) {\n              const transactions = event.transactions;\n              console.log(`Processing ${transactions.length} transactions`);\n              for (const tx of transactions) {\n                analyzeTransaction(tx, context);\n              }\n            }\n            processTransactions(event, context);","javascript-features#JavaScript Features":"ES6+ syntax via GraalVM Polyglot support\nJSON processing","python-configuration#Python Configuration":"store:\n  plugins:\n    pre-actions:\n      utxo.unspent.save:\n        - name: \"Python Data Enrichment\"\n          lang: python\n          script:\n            file: /app/plugins/scripts/enrich_utxos.py\n            function: enrich_with_external_data\n        - name: \"Python Inline\"\n          lang: python\n          inline-script: |\n            import json\n            def process_items(items, context):\n                logger = context.logger\n                enriched = []\n                for item in items:\n                    # Enrich item data\n                    item.processed_at = time.time()\n                    enriched.append(item)\n                logger.info(f\"Processed {len(enriched)} items\")\n                return enriched\n            # Process the items\n            result = process_items(items, context)","python-features#Python Features":"Python 3.x syntax via GraalVM Polyglot support\nRich data structures"}},"/plugins/plugin-getting-started":{"title":"Plugin Getting Started Guide","data":{"":"Supported Version : 2.0.0-beta3 and laterA beginner-friendly guide to writing your first yaci-store pluginThis guide will walk you through creating simple plugins using MVEL and SpEL expression languages. By the end of this tutorial, you'll understand how to filter and process blockchain data using the yaci-store plugin system.","prerequisites#Prerequisites":"Yaci-store docker distribution installed\nBasic understanding of blockchain concepts (transactions, UTXOs, metadata)\nFamiliarity with simple programming concepts","setup#Setup":"","1-enable-plugin-support#1. Enable Plugin Support":"First, unzip your yaci-store docker distribution and navigate to the directory.Edit the config/env file to enable plugin support by uncommenting the following line:\nJDK_JAVA_OPTIONS=${JDK_JAVA_OPTIONS} -Dloader.path=plugins,plugins/lib,plugins/ext-jars","2-understanding-the-plugin-directory-structure#2. Understanding the Plugin Directory Structure":"The plugin system uses the following directory structure:\nplugins/\n├── scripts/     # Your plugin script files go here\n├── ext-jars/    # External JAR files (for advanced use cases)\n└── lib/         # Additional libraries","3-plugin-configuration#3. Plugin Configuration":"Inside the config folder, you'll find application-plugins.yml. This file configures all your plugins.To enable plugin support, set store.plugins.enabled to true:\nstore:\n  plugins:\n    enabled: true","understanding-plugin-types#Understanding Plugin Types":"Yaci-store supports several types of plugins:\nFilter Plugins: Control what data gets stored in the database\nPre-Action Plugins: Modify data before it's saved\nPost-Action Plugins: Perform actions after data is saved\nEvent Handler Plugins: React to blockchain events","plugin-languages#Plugin Languages":"For this guide, we'll focus on two simple expression languages:\nMVEL: A powerful expression language with Java-like syntax\nSpEL: Spring Expression Language, great for simple filtering\nThe Yaci Store plugin system also supports writing plugins in Python and JavaScript.\nHowever, Python and JavaScript support is currently in preview.\nWe will cover them in a separate document later.","your-first-plugin-filtering-nft-metadata#Your First Plugin: Filtering NFT Metadata":"Let's create a plugin that only stores NFT metadata (label 721) in the database.","method-1-using-expressions-simplest#Method 1: Using Expressions (Simplest)":"The easiest way to create a filter is using simple expressions:","mvel-expression#MVEL Expression":"store:\n  plugins:\n    enabled: true\n    filters:\n      metadata.save:\n        - name: \"NFT Metadata Filter\"\n          lang: mvel\n          expression: label == \"721\"","spel-expression#SpEL Expression":"store:\n  plugins:\n    enabled: true\n    filters:\n      metadata.save:\n        - name: \"NFT Metadata Filter\"\n          lang: spel\n          expression: label == \"721\"\nBoth expressions do the same thing: they filter metadata to only include items with label \"721\" (NFT metadata standard).Key Points:\nThe metadata.save extension point is triggered when metadata is saved.\nIn an expression-based filter, direct access to the domain class's fields is available.\nThe expression should evaluate to true for the item to be stored.","method-2-using-inline-scripts#Method 2: Using Inline Scripts":"For more complex logic, you can write inline scripts:\nstore:\n  plugins:\n    enabled: true\n    filters:\n      metadata.save:\n        - name: \"Multiple Label Filter\"\n          lang: mvel\n          inline-script: |\n            filteredItems = [];\n            for (item : items) {\n                if (item.label == \"721\" || item.label == \"1967\") {\n                    filteredItems.add(item);\n                }\n            }\n            return filteredItems;\nKey Points:\nIn inline scripts, the input is always called items\nYou must return the filtered list\nDon't include function signatures, just the body","method-3-using-external-script-files#Method 3: Using External Script Files":"For reusable or complex logic, create separate script files:\nCreate plugins/scripts/nft-filter.mvel:\ndef filterNFTMetadata(items) {\n    filteredItems = [];\n    for (item : items) {\n        if (item.label == \"721\") {\n            filteredItems.add(item);\n        }\n    }\n    return filteredItems;\n}\nReference it in your configuration:\nstore:\n  plugins:\n    enabled: true\n    filters:\n      metadata.save:\n        - name: \"NFT Metadata Filter\"\n          lang: mvel\n          script:\n            file: /app/plugins/scripts/nft-filter.mvel\n            function: filterNFTMetadata\nNote: For Docker deployments, use /app/plugins/scripts/ as the path prefix.","testing-your-plugin#Testing Your Plugin":"","quick-start-configuration#Quick Start Configuration":"To test quickly without syncing from genesis, you can start from a recent block:\n# Add to config/application.properties\nstore.cardano.sync-start-slot=17558626\nstore.cardano.sync-start-blockhash=","start-yaci-store#Start Yaci-Store":"./yaci-store.sh start\nVerify the logs to ensure that yaci-store is running correctly and that plugins are enabled:\ntail -f logs/yaci-store.log\nor,\n./yaci_store.sh logs","verify-results#Verify Results":"Connect to the database and check the results:\n./psql.sh\n-- Set the schema\nSET search_path TO yaci_store;\n-- Check that only NFT metadata (label 721) is stored\nSELECT tx_hash, label FROM transaction_metadata;\nYou should see only metadata with label \"721\".","example-2-filtering-high-value-utxos#Example 2: Filtering High-Value UTXOs":"Let's create a plugin that only stores UTXOs worth more than 1000 ADA:","spel-expression-recommended-for-simple-filters#SpEL Expression (Recommended for simple filters)":"store:\n  plugins:\n    enabled: true\n    filters:\n      utxo.unspent.save:\n        - name: \"High Value UTXO Filter\"\n          lang: spel\n          expression: lovelaceAmount > 1000000000","mvel-expression-with-multiple-conditions#MVEL Expression with Multiple Conditions":"High value UTXOs without any native assets:\nstore:\n  plugins:\n    enabled: true\n    filters:\n      utxo.unspent.save:\n        - name: \"High Value and Asset UTXO Filter\"\n          lang: mvel\n          expression: |\n            lovelaceAmount > 1000000000 &&\n            (amounts != null && amounts.size() == 1)","example-3-filtering-by-asset-policy#Example 3: Filtering by Asset Policy":"To filter UTXOs that contain specific native assets:","spel-with-collection-filtering#SpEL with Collection Filtering":"store:\n  plugins:\n    enabled: true\n    filters:\n      utxo.unspent.save:\n        - name: \"Specific Asset Filter\"\n          lang: spel\n          expression: amounts.?[policyId == 'your_policy_id_here'].size() > 0","mvel-with-custom-logic#MVEL with Custom Logic":"store:\n  plugins:\n    enabled: true\n    filters:\n      utxo.unspent.save:\n        - name: \"Multiple Policy Filter\"\n          lang: mvel\n          expression: |\n            if (amounts == null) return false;\n            foreach (amount : amounts) {\n                if (amount.policyId == 'policy1' ||\n                    amount.policyId == 'policy2') {\n                    return true;\n                }\n            }\n            return false;","pre-action-plugins-modifying-data#Pre-Action Plugins: Modifying Data":"Pre-action plugins run after filters but before data is saved. They can modify the data.","example-filter-utxos-with-specific-policyid-and-replace-it-with-a-custom-label#Example: Filter utxos with Specific PolicyId and Replace it with a custom label":"store:\n  plugins:\n    enabled: true\n    filters:\n      utxo.unspent.save:\n        - name: \"Specific Asset Filter\"\n          lang: spel\n          expression: amounts.?[policyId == ''].size() > 0\n    pre-actions:\n      utxo.unspent.save:\n        - name: \"Replace PolicyId in UTXOs\"\n          lang: mvel\n          inline-script: |\n            modifiedUtxos = [];\n            for (utxo : items) {\n              for (amt: utxo.amounts) {\n                if (amt.getPolicyId() == \"\") {\n                    amt.setPolicyId(\"MyPolicyId\"); // Update policyId\n                    modifiedUtxos.add(amt);\n                }\n              }\n            }\n            return modifiedUtxos;\nKey Points:\nPre-action plugins allow you to modify data before it is saved.\nWhile most domain objects (items) are immutable, meaning you can update their fields, there are exceptions. For example,\nTxMetadataLabel cannot be modified as it does not have setter methods. In such cases, you may need to create a new\ninstance with updated values.\nTo check if an object is mutable or not with regard to the storage extension point, refer to the\nPlugin API Guide.\nSimilar to filter plugins, a pre-action plugin can be written in an external script file or as an inline script.","post-action-plugins-notifications#Post-Action Plugins: Notifications":"Post-action plugins run after data is successfully saved. Perfect for notifications.","example-log-high-fee-transactions#Example: Log High-Fee Transactions":"store:\n  plugins:\n    enabled: true\n    post-actions:\n      transaction.save:\n        - name: \"High Fee Transaction Logger\"\n          lang: mvel\n          inline-script: |\n            highFeeTxCount = 0;\n            totalOutput = 0;\n            for (txn : items) {\n                if (txn.fee > 1000000) { // > 1 ADA\n                    highFeeTxCount++;\n                }\n            }\n            if (highFeeTxCount > 0) {\n                System.out.println(\"Found \" + highFeeTxCount + \" high-fee transactions\");\n            }","event-handler-plugins-reacting-to-events#Event Handler Plugins: Reacting to Events":"Event handlers listen to blockchain events and can perform custom actions.","example-block-processing-monitor#Example: Block Processing Monitor":"store:\n  plugins:\n    enabled: true\n    event-handlers:\n      BlockEvent:\n        - name: \"Block Monitor\"\n          lang: mvel\n          inline-script: |\n            block = event.block;\n            System.out.println(\"Processing block \" + block.header.headerBody.blockNumber +\n                             \" with \" + block.transactionBodies.size() + \" transactions\");","common-extension-points#Common Extension Points":"Here are the most commonly used extension points:","storage-extension-points#Storage Extension Points":"metadata.save - Transaction metadata\nutxo.unspent.save - New unspent UTXOs\ntransaction.save - Transaction data\nasset.mint.save - Asset minting operations","event-types#Event Types":"BlockEvent - New blocks\nTransactionEvent - Transaction processing\nAddressUtxoEvent - Address UTXO changes\nMintBurnEvent - Asset mint/burn operations","tips-for-success#Tips for Success":"","1-start-simple#1. Start Simple":"Begin with expression-based filters before moving to scripts.","2-test-incrementally#2. Test Incrementally":"Test each plugin individually before combining multiple plugins.","3-use-appropriate-field-names#3. Use Appropriate Field Names":"Make sure field names in your expressions match the Java model exactly:\nlovelaceAmount (not lovelace_amount)\npolicyId (not policy_id)","4-handle-null-values#4. Handle Null Values":"Always check for null values in your expressions:\n// Good\namounts != null && amounts.size() > 0\n// Bad (can cause errors)\namounts.size() > 0","5-multiple-filters--and-logic#5. Multiple Filters = AND Logic":"If you have multiple filters for the same extension point, they all must return true (AND logic).","common-mistakes-to-avoid#Common Mistakes to Avoid":"Forgetting semicolons in MVEL: Always end statements with ;\nWrong field names: Use exact Java field names\nNot handling null values: Check for null before accessing properties\nWrong file paths: Use /app/plugins/scripts/ for Docker deployments","non-docker-distribution#Non-Docker Distribution":"If you're using a non-Docker distribution:\nUncomment this line in bin/start.sh:\nJAVA_OPTS=\"$JAVA_OPTS -Dloader.path=plugins,plugins/lib,plugins/ext-jars\"\nUse relative paths in your configuration:\nscript:\n  file: ./plugins/scripts/your-script.mvel","troubleshooting#Troubleshooting":"","plugin-not-working#Plugin Not Working?":"Check that store.plugins.enabled=true\nVerify file paths are correct\nCheck logs for syntax errors\nEnsure field names match Java models","syntax-errors#Syntax Errors?":"Start with simple expressions\nCheck for missing semicolons\nVerify parentheses matching\nWith these basics, you're ready to start building powerful blockchain data processing plugins!","next-steps#Next Steps":"Once you're comfortable with basic plugins, explore:\nPlugin Context Variables - Context variables available in plugins\nPlugin Configuration Reference - Complete configuration options\nPlugin API Guide - Developer Reference for plugin APIs"}},"/plugins/plugin_api-guide":{"title":"Yaci-Store Plugin API Reference","data":{"":"Complete Developer Reference for Plugin Development","table-of-contents#Table of Contents":"Overview\nStorage Extension Points\nEvent Classes\nDomain Classes","overview#Overview":"This reference guide provides comprehensive documentation for all extension points, domain classes, and variables available to plugin developers in the yaci-store system. The primary focus is on MVEL plugins with additional examples in JavaScript and Python.","key-concepts#Key Concepts":"Extension Points: Predefined hooks where plugins can intercept and process data\nDomain Classes: Core blockchain data structures (blocks, transactions, assets, etc.)\nEvent Classes: Data containers representing blockchain events\nPlugin Variables: Built-in variables for database access, HTTP calls, and utilities\nField Names: All field names use camelCase (e.g., lovelaceAmount, txHash, ownerAddr)\nParameter Signatures:\nStorage plugins (filter, pre-action, post-action): function(items)\nEvent handlers: function(event)\nVariables are directly available by name (no context parameter)","important-field-access-patterns-by-language#Important: Field Access Patterns by Language":"Different plugin languages have different ways of accessing Java object fields. This is crucial to understand for writing working plugins.","mvel-and-spel#MVEL and SPEL":"Direct field access: You can access fields directly using dot notation (e.g., item.label, utxo.lovelaceAmount)\nGetter/setter access: Also supports standard getter/setter methods (e.g., item.getLabel(), utxo.setLovelaceAmount())\nBoth patterns work: Choose based on preference, but direct field access is more concise\n// MVEL - Direct field access (recommended)\nif (item.label == \"721\") { ... }\namount = utxo.lovelaceAmount;\n// MVEL - Getter/setter access (also works)\nif (item.getLabel() == \"721\") { ... }\namount = utxo.getLovelaceAmount();","javascript-and-python#JavaScript and Python":"Only getter/setter access: Must use getter/setter methods to access fields\nDirect field access will NOT work: item.label will return undefined or throw an error\nAlways use methods: getFieldName() to read, setFieldName(value) to write\n// JavaScript - CORRECT\nif (item.getLabel() === \"721\") { ... }\nconst amount = utxo.getLovelaceAmount();\n// JavaScript - INCORRECT (will not work)\nif (item.label === \"721\") { ... }  // ❌ Returns undefined\n# Python - CORRECT\nif item.getLabel() == \"721\": ...\namount = utxo.getLovelaceAmount()\n# Python - INCORRECT (will not work)\nif item.label == \"721\": ...  # ❌ Throws AttributeError\nQuick Reference:\nMVEL/SPEL: object.field or object.getField()\nJavaScript/Python: object.getField() only","storage-extension-points#Storage Extension Points":"Storage extension points are predefined hooks where storage plugins can intercept data before it's saved to the database. Each extension point is identified by a unique key and processes specific domain objects.","utxo-store-extension-points#UTXO Store Extension Points":"","utxounspentsave#utxo.unspent.save":"Purpose: Process new unspent UTXOs before storage\nDomain Object: AddressUtxoMVEL Example:\n// Filter high-value UTXOs (> 1000 ADA)\ndef filterHighValueUtxos(items) {\n    filtered = [];\n    for (utxo : items) {\n        if (utxo.lovelaceAmount > 1000000000) {\n            filtered.add(utxo);\n        }\n    }\n    return filtered;\n}\n# Configuration\nstore:\n  plugins:\n    filters:\n      utxo.unspent.save:\n        - name: \"High Value UTXO Filter\"\n          lang: mvel\n          expression: lovelaceAmount > 1000000000","utxospentsave#utxo.spent.save":"Purpose: Process spent UTXOs before storage\nDomain Object: TxInput","transaction-store-extension-points#Transaction Store Extension Points":"","transactionsave#transaction.save":"Purpose: Process transaction data before storage\nDomain Object: Txn\n// Filter high-fee transactions\ndef filterHighFeeTransactions(items) {\n    filtered = [];\n    for (txn : items) {\n        if (txn.fee > 10000000) { // > 10 ADA\n            filtered.add(txn);\n        }\n    }\n    return filtered;\n}","transactionwitnesssave#transaction.witness.save":"Purpose: Process transaction witnesses before storage\nDomain Object: TxnWitness","transactionwithdrawalsave#transaction.withdrawal.save":"Purpose: Process stake withdrawals before storage\nDomain Object: Withdrawal","metadata-store-extension-points#Metadata Store Extension Points":"","metadatasave#metadata.save":"Purpose: Process transaction metadata before storage\nDomain Object: TxMetadataLabelMVEL Example:\n// Filter NFT metadata (CIP-25)\nexpression: label == \"721\"\nJavaScript Example:\n// Process NFT metadata\nfunction processNFTMetadata(items) {\n    const nftMetadata = [];\n    for (const item of items) {\n        if (item.getLabel() === \"721\") {\n            try {\n                // Parse NFT metadata\n                const metadata = JSON.parse(item.getBody());\n                console.log(`NFT metadata in tx: ${item.getTxHash()}`);\n                nftMetadata.push(item);\n            } catch (e) {\n                console.error(`Invalid NFT metadata in ${item.getTxHash()}: ${e.message}`);\n            }\n        }\n    }\n    return nftMetadata;\n}","asset-store-extension-points#Asset Store Extension Points":"","assetsave#asset.save":"Purpose: Process native asset mint/burn operations before storage\nDomain Object: TxAssetMVEL Example:\n// Filter NFT mints (quantity = 1)\ndef filterNFTMints(items) {\n    nfts = [];\n    for (asset : items) {\n        if (asset.quantity == 1 && asset.mintType.name() == \"MINT\") {\n            nfts.add(asset);\n        }\n    }\n    return nfts;\n}\nNote: The mintType field is an enum with values MINT and BURN. Enum values can be accessed using name() method.","block-store-extension-points#Block Store Extension Points":"","blocksave#block.save":"Purpose: Process block data before storage\nDomain Object: Block\n// Filter high-activity blocks\nexpression: noOfTxs > 500","script-store-extension-points#Script Store Extension Points":"","scriptsave#script.save":"Purpose: Process script definitions before storage\nDomain Object: Script","scriptdatumsave#script.datum.save":"Purpose: Process datum data before storage\nDomain Object: Datum","scripttx_scriptsave#script.tx_script.save":"Purpose: Process transaction script executions before storage\nDomain Object: TxScript","staking-store-extension-points#Staking Store Extension Points":"","stakingkey_registrationsave#staking.key_registration.save":"Purpose: Process stake key registrations before storage\nDomain Object: StakeRegistrationDetail","stakingkey_delegationsave#staking.key_delegation.save":"Purpose: Process stake delegations before storage\nDomain Object: Delegation","stakingpool_registrationsave#staking.pool_registration.save":"Purpose: Process pool registrations before storage\nDomain Object: PoolRegistration\n// Filter high-pledge pools\ndef filterHighPledgePools(items) {\n    highPledge = [];\n    for (pool : items) {\n        if (pool.pledge > 1000000000000) { // > 1M ADA\n            highPledge.add(pool);\n        }\n    }\n    return highPledge;\n}","stakingpool_retirementsave#staking.pool_retirement.save":"Purpose: Process pool retirements before storage\nDomain Object: PoolRetirement","stakingpoolsave#staking.pool.save":"Purpose: Process pool status updates before storage\nDomain Object: Pool","governance-store-extension-points-conway-era#Governance Store Extension Points (Conway Era)":"","governancegov_action_proposalsave#governance.gov_action_proposal.save":"Purpose: Process governance proposals before storage\nDomain Object: GovActionProposal\n// Filter high-deposit proposals\nexpression: deposit > 10000000000 // > 10k ADA","governancevoting_proceduresave#governance.voting_procedure.save":"Purpose: Process votes before storage\nDomain Object: VotingProcedure","governancedrep_registrationsave#governance.drep_registration.save":"Purpose: Process DRep registrations before storage\nDomain Object: DRepRegistration","governancedrepsave#governance.drep.save":"Purpose: Process DRep status updates before storage\nDomain Object: DRep","governancedelegation_votesave#governance.delegation_vote.save":"Purpose: Process vote delegations before storage\nDomain Object: DelegationVote","governancecommittee_registrationsave#governance.committee_registration.save":"Purpose: Process committee registrations before storage\nDomain Object: CommitteeRegistration","governancecommittee_membersave#governance.committee_member.save":"Purpose: Process committee member updates before storage\nDomain Object: CommitteeMember","governancecommittee_deregistrationsave#governance.committee_deregistration.save":"Purpose: Process committee deregistrations before storage\nDomain Object: CommitteeDeRegistration","event-classes#Event Classes":"Event classes represent blockchain events that can be processed by event handler plugins. Event handlers take one parameter: event.Common Field: All event classes (except RollbackEvent and internal events) contain an EventMetadata metadata field with block context information like blockNumber, blockHash, slot, epochNumber, etc.","system-events#System Events":"","rollbackevent#RollbackEvent":"Purpose: Notifies when blockchain rollback occurs\ndef handleRollback(event) {\n    System.out.println(\"Rollback to slot: \" + event.rollbackTo.slot);\n    System.out.println(\"Current block: \" + event.currentBlock);\n    // Cleanup plugin state if needed\n    // global_state.removeKeysAfterSlot(event.rollbackTo.slot);\n}","commitevent#CommitEvent":"Purpose: Triggered at the end of each block batch processing, enabling sequential post-processing after parallel block ingestionHow it Works:\nDuring Initial Sync: Blocks are processed in parallel batches (typically 200 blocks). CommitEvent fires when the entire batch is committed to storage\nSequential Processing: Runs after parallel block processing is complete, ensuring all batch data is available\nAt Chain Tip: After reaching tip, batch size becomes 1, but CommitEvent still fires for each block\nTiming: Perfect for operations that need to run sequentially after parallel processing completes\nUse Cases: Aggregate calculations, cleanup tasks, external notifications, batch statistics, triggering dependent systems\ndef handleCommitEvent(event) {\n    System.out.println(\"Batch committed - processing complete for batch\");\n    System.out.println(\"Metadata: \" + event.metadata);\n    // Perform sequential post-processing\n    // - Calculate batch statistics\n    // - Send batch completion notifications\n    // - Trigger dependent systems\n    // - Cleanup temporary data\n    // Example: Aggregate batch metrics\n    batchKey = \"batch_\" + event.metadata.blockNumber;\n    global_state.put(batchKey + \"_processed\", true);\n    System.out.println(\"Batch post-processing completed\");\n}","precommitevent#PreCommitEvent":"Purpose: Triggered before data commit operations","preepochtransitionevent#PreEpochTransitionEvent":"Purpose: Triggered before epoch transition processing","epochtransitioncommitevent#EpochTransitionCommitEvent":"Purpose: Triggered during epoch transition commit phase","epochchangeevent#EpochChangeEvent":"Purpose: Notifies when epoch changesJavaScript Example:\nfunction handleEpochChange(event) {\n    const metadata = event.getMetadata();\n    console.log(`Epoch changed from ${event.getPreviousEpoch()} to ${metadata.getEpochNumber()}`);\n    // Trigger epoch-specific processing\n    if (metadata.getEpochNumber() % 10 === 0) {\n        console.log(\"Milestone epoch reached!\");\n    }\n}","blockchain-data-events#Blockchain Data Events":"","blockevent#BlockEvent":"Purpose: Contains complete block dataKey Fields:\nEventMetadata metadata - Block context information\nBlock block - Complete block data from yaci-core (see Block)\ndef handleBlockEvent(event) {\n    block = event.block;  // This is the yaci-core Block object\n    metadata = event.metadata;\n    // Access yaci-core Block fields\n    System.out.println(\"Era: \" + block.era);\n    System.out.println(\"Block number: \" + block.header.headerBody.blockNumber);\n    System.out.println(\"Slot: \" + block.header.headerBody.slot);\n    System.out.println(\"Previous hash: \" + block.header.headerBody.prevHash);\n    System.out.println(\"Block hash: \" + block.header.headerBody.blockHash);\n    // Transaction information\n    System.out.println(\"Transactions: \" + block.transactionBodies.size());\n    System.out.println(\"Witnesses: \" + block.transactionWitness.size());\n    // Check for invalid transactions\n    if (!block.invalidTransactions.isEmpty()) {\n        System.out.println(\"Invalid transactions: \" + block.invalidTransactions);\n    }\n    // Check auxiliary data\n    if (!block.auxiliaryDataMap.isEmpty()) {\n        System.out.println(\"Blocks with metadata: \" + block.auxiliaryDataMap.size());\n    }\n}","transactionevent#TransactionEvent":"Purpose: Contains transaction data from yaci-helperKey Fields:\nEventMetadata metadata - Block context information\nList<Transaction> transactions - Transaction data (see Transaction)\nPython Example:\ndef handle_transaction_event(event):\n    \"\"\"Process transaction events\"\"\"\n    transactions = event.getTransactions()\n    metadata = event.getMetadata()\n    high_value_count = 0\n    smart_contract_count = 0\n    for tx in transactions:\n        # Calculate total output\n        total_output = sum(out.getAmount() for out in tx.getOutputs() if hasattr(out, 'getAmount'))\n        # Track high-value transactions\n        if total_output > 1000 * 1_000_000:  # > 1000 ADA\n            high_value_count += 1\n            print(f\"High value transaction: {tx.getHash()}\")\n        # Track smart contract transactions\n        if hasattr(tx, 'getScriptDataHash') and tx.getScriptDataHash():\n            smart_contract_count += 1\n    if high_value_count > 0:\n        print(f\"Found {high_value_count} high-value transactions\")\n    if smart_contract_count > 0:\n        print(f\"Found {smart_contract_count} smart contract transactions\")","mintburnevent#MintBurnEvent":"Purpose: Contains asset mint/burn operationsKey Fields:\nEventMetadata metadata - Block context information\nList<TxMintBurn> txMintBurns - Asset mint/burn operations (see TxMintBurn)\nMVEL Example:\ndef handleMintBurnEvent(event) {\n    for (mintBurn : event.txMintBurns) {\n        if (mintBurn.quantity > 0) {\n            System.out.println(\"MINT: \" + mintBurn.quantity + \" of \" + mintBurn.policy);\n        } else {\n            System.out.println(\"BURN: \" + Math.abs(mintBurn.quantity) + \" of \" + mintBurn.policy);\n        }\n        // Track NFT operations\n        if (Math.abs(mintBurn.quantity) == 1) {\n            System.out.println(\"NFT operation detected: \" + mintBurn.policy + \".\" + mintBurn.assetName);\n        }\n    }\n}","governanceevent#GovernanceEvent":"Purpose: Contains Conway era governance dataKey Fields:\nEventMetadata metadata - Block context information\nList<TxGovernance> txGovernanceList - Governance transactions\nJavaScript Example:\nfunction handleGovernanceEvent(event) {\n    const govList = event.getTxGovernanceList();\n    for (const govTx of govList) {\n        console.log(`Governance transaction: ${govTx.getTransactionHash()}`);\n        // Process proposals\n        if (govTx.getProposalProcedures()) {\n            for (const proposal of govTx.getProposalProcedures()) {\n                console.log(`New proposal: ${proposal.getGovActionType()}`);\n                console.log(`Deposit: ${proposal.getDeposit() / 1_000_000} ADA`);\n            }\n        }\n        // Process votes\n        if (govTx.getVotingProcedures()) {\n            for (const vote of govTx.getVotingProcedures()) {\n                console.log(`Vote: ${vote.getVoterType()} voted ${vote.getVote()}`);\n            }\n        }\n    }\n}","certificateevent#CertificateEvent":"Purpose: Contains stake pool and delegation certificate dataKey Fields:\nEventMetadata metadata - Block context information\nList<TxCertificates> txCertificatesList - Certificate data (see TxCertificates)","updateevent#UpdateEvent":"Purpose: Contains protocol parameter update informationKey Fields:\nEventMetadata metadata - Block context information\nList<TxUpdate> updates - Protocol parameter updates","staking-events#Staking Events":"","poolregistrationevent#PoolRegistrationEvent":"Purpose: Contains stake pool registration dataKey Fields:\nEventMetadata metadata - Block context information\nList<PoolRegistration> poolRegistrations - Pool registration certificates (see PoolRegistration)","poolretiredevent#PoolRetiredEvent":"Purpose: Notifies when stake pools are retiredKey Fields:\nEventMetadata metadata - Block context information\nList<Pool> retiredPools - Retired pool information (see Pool)","poolretirementevent#PoolRetirementEvent":"Purpose: Contains stake pool retirement certificate dataKey Fields:\nEventMetadata metadata - Block context information\nList<PoolRetirement> poolRetirements - Pool retirement certificates (see PoolRetirement)","stakeregderegevent#StakeRegDeregEvent":"Purpose: Contains stake key registration/deregistration dataKey Fields:\nEventMetadata metadata - Block context information\nList<StakeRegistrationDetail> stakeRegistrationDetails - Registration/deregistration details (see StakeRegistrationDetail)","stakingdepositevent#StakingDepositEvent":"Purpose: Contains staking-related deposit informationKey Fields:\nEventMetadata metadata - Block context information\nint stakeKeyRegistrationCount - Number of stake key registrations\nint stakeKeyDeRegistrationCount - Number of stake key deregistrations\nint stakePoolRegistrationCount - Number of pool registrations","store-specific-events#Store-Specific Events":"","addressutxoevent#AddressUtxoEvent":"Purpose: Address UTXO changesKey Fields:\nEventMetadata metadata - Block context information\nList<TxInputOutput> txInputOutputs - UTXO changes\nMVEL Example:\ndef handleAddressUtxoEvent(event) {\n    for (txInputOutput : event.txInputOutputs) {\n        if (txInputOutput.type == \"OUTPUT\") {\n            System.out.println(\"New UTXO: \" + txInputOutput.txHash + \"#\" + txInputOutput.outputIndex);\n        } else {\n            System.out.println(\"Spent UTXO: \" + txInputOutput.txHash + \"#\" + txInputOutput.outputIndex);\n        }\n    }\n}","txmetadataevent#TxMetadataEvent":"Purpose: Processed metadata eventsKey Fields:\nEventMetadata metadata - Block context information\nList<TxMetadata> txMetadataList - Transaction metadata","txnevent#TxnEvent":"Purpose: Processed transaction eventsKey Fields:\nEventMetadata metadata - Block context information\nList<Txn> txnList - Processed transactions (see Txn)","domain-classes#Domain Classes":"Domain classes represent the core blockchain data structures. All field names use camelCase.Mutability: Most domain classes are mutable (provide both getters and setters), except where noted as immutable (getters only).","core-classes#Core Classes":"","addressutxo#AddressUtxo":"Purpose: Represents a UTXO at a specific address (see utxo.unspent.save)Mutability: Mutable (getters and setters)\nNested Classes: AmtKey Fields:\n// UTXO identification\nutxo.txHash              // String: Source transaction hash\nutxo.outputIndex         // Integer: Output index\nutxo.slot                // Long: Creation slot\nutxo.blockHash           // String: Creation block hash\nutxo.epoch               // Integer: Creation epoch\n// Address information\nutxo.ownerAddr           // String: Owner address (bech32)\nutxo.ownerStakeAddr      // String: Stake address\nutxo.ownerPaymentCredential  // String: Payment credential\nutxo.ownerStakeCredential    // String: Stake credential\n// Value\nutxo.lovelaceAmount      // BigInteger: ADA amount in lovelace\nutxo.amounts             // List<Amt>: Native asset amounts\n// Smart contract data\nutxo.dataHash            // String: Datum hash\nutxo.inlineDatum         // String: Inline datum\nutxo.scriptRef           // String: Script reference\nutxo.referenceScriptHash // String: Reference script hash\n// Special flags\nutxo.isCollateralReturn  // Boolean: Whether this is collateral return\nUsage Example:\ndef analyzeUtxo(items) {\n    highValue = [];\n    nftUtxos = [];\n    scriptUtxos = [];\n    for (utxo : items) {\n        // High-value detection\n        if (utxo.lovelaceAmount > 1000000000) {\n            highValue.add(utxo);\n        }\n        // NFT detection\n        if (utxo.amounts != null) {\n            for (amount : utxo.amounts) {\n                if (amount.quantity == 1) {\n                    nftUtxos.add(utxo);\n                    break;\n                }\n            }\n        }\n        // Script UTXO detection\n        if (utxo.dataHash != null || utxo.inlineDatum != null || utxo.scriptRef != null) {\n            scriptUtxos.add(utxo);\n        }\n    }\n    System.out.println(\"High-value UTXOs: \" + highValue.size());\n    System.out.println(\"NFT UTXOs: \" + nftUtxos.size());\n    System.out.println(\"Script UTXOs: \" + scriptUtxos.size());\n    return items;\n}","block#Block":"Purpose: Represents a blockchain blockMutability: Mutable (getters and setters)\nNested Classes: VrfKey Fields:\n// Block identification\nblock.hash               // String: Block hash\nblock.number             // Long: Block number\nblock.slot               // Long: Slot number\nblock.epochNumber        // Integer: Epoch number\nblock.epochSlot          // Integer: Slot within epoch\n// Block content\nblock.prevHash           // String: Previous block hash\nblock.totalOutput        // BigInteger: Total output in lovelace\nblock.totalFees          // BigInteger: Total fees in lovelace\nblock.noOfTxs            // int: Number of transactions\n// Timing\nblock.blockTime          // Long: Block timestamp\n// Block producer info\nblock.slotLeader         // String: Slot leader\nblock.issuerVkey         // String: Block issuer verification key\nblock.vrfVkey            // String: VRF verification key\nblock.nonceVrf           // Vrf: Nonce VRF\nblock.leaderVrf          // Vrf: Leader VRF\nblock.vrfResult          // Vrf: VRF result\n// Block structure\nblock.blockBodySize      // long: Body size in bytes\nblock.blockBodyHash      // String: Body hash\nblock.protocolVersion    // String: Protocol version","txmetadatalabel#TxMetadataLabel":"Purpose: Transaction metadata organized by labelMutability: Immutable (getters only)Key Fields:\n// Transaction reference\nmetadata.txHash          // String: Transaction hash\nmetadata.slot            // Long: Slot number\n// Metadata content\nmetadata.label           // String: Metadata label\nmetadata.body            // String: Metadata body (JSON)\nmetadata.cbor            // String: Raw CBOR data\nUsage Example:\nJavaScript Example:\nfunction processMetadata(items) {\n    const nftMetadata = [];\n    const tokenMetadata = [];\n    for (const item of items) {\n        switch (item.getLabel()) {\n            case \"721\":\n                // NFT metadata (CIP-25)\n                try {\n                    const nftData = JSON.parse(item.getBody());\n                    console.log(`NFT metadata in ${item.getTxHash()}`);\n                    nftMetadata.push(item);\n                } catch (e) {\n                    console.error(`Invalid NFT metadata: ${e.message}`);\n                }\n                break;\n            case \"1967\":\n                // Token metadata\n                tokenMetadata.push(item);\n                break;\n            case \"674\":\n                // Message metadata\n                console.log(`Message in ${item.getTxHash()}: ${item.getBody()}`);\n                break;\n        }\n    }\n    console.log(`Processed ${nftMetadata.length} NFT metadata items`);\n    return items;\n}","txasset#TxAsset":"Purpose: Represents native assets in transactions (see asset.save)Mutability: Immutable (getters only)\nNested Classes: MintType (enum)Key Fields:\n// Asset identification\nasset.policy             // String: Policy ID (hex)\nasset.assetName          // String: Asset name (hex)\nasset.unit               // String: Policy + asset name\nasset.fingerprint        // String: Asset fingerprint (CIP-14)\n// Transaction context\nasset.slot               // Long: Slot number\nasset.txHash             // String: Transaction hash\n// Asset operation\nasset.quantity           // BigInteger: Asset quantity\nasset.mintType           // MintType: \"MINT\" or \"BURN\"","txn#Txn":"Purpose: Represents a processed transaction (see transaction.save)Mutability: Mutable (getters and setters)\nNested Classes: UtxoKey, TxOuputKey Fields:\n// Transaction identification\ntxn.txHash               // String: Transaction hash\ntxn.blockHash            // String: Containing block hash\ntxn.slot                 // Long: Slot number\ntxn.txIndex              // Integer: Index within block\n// Transaction structure\ntxn.fee                  // BigInteger: Transaction fee in lovelace\ntxn.ttl                  // Long: Time to live\ntxn.auxiliaryDataHash    // String: Metadata hash\ntxn.scriptDataHash       // String: Script data hash\ntxn.inputs               // List<UtxoKey>: Transaction inputs\ntxn.outputs              // List<UtxoKey>: Transaction outputs\ntxn.collateralInputs     // List<UtxoKey>: Collateral inputs\ntxn.referenceInputs      // List<UtxoKey>: Reference inputs\ntxn.collateralReturn     // UtxoKey: Collateral return\ntxn.collateralReturnJson // TxOuput: Collateral return details\ntxn.requiredSigners      // Set<String>: Required signers\n// Status\ntxn.invalid              // Boolean: Whether transaction is invalid","txnwitness#TxnWitness":"Purpose: Represents transaction witness data (see transaction.witness.save)Mutability: Mutable (getters and setters)Key Fields:\n// Transaction reference\nwitness.txHash           // String: Transaction hash\nwitness.index            // Integer: Witness index\nwitness.slot             // Long: Slot number\n// Witness data\nwitness.pubKey           // String: Public key\nwitness.signature        // String: Signature\nwitness.pubKeyhash       // String: Public key hash\nwitness.type             // TxWitnessType: Witness type enum\nwitness.additionalData   // JsonNode: Additional witness data","withdrawal#Withdrawal":"Purpose: Represents stake withdrawal operations (see transaction.withdrawal.save)Mutability: Mutable (getters and setters)Key Fields:\n// Transaction reference\nwithdrawal.txHash        // String: Transaction hash\nwithdrawal.slot          // Long: Slot number\nwithdrawal.blockNumber   // String: Block number\nwithdrawal.epoch         // Integer: Epoch number\n// Withdrawal details\nwithdrawal.address       // String: Reward address\nwithdrawal.amount        // BigInteger: Withdrawal amount in lovelace","txinput#TxInput":"Purpose: Represents transaction inputs/spent UTXOs (see utxo.spent.save)Mutability: Mutable (getters and setters)Key Fields:\n// Input reference\ninput.txHash             // String: Source transaction hash\ninput.outputIndex        // Integer: Output index being spent\n// Spent information\ninput.spentAtSlot        // Long: Slot when UTXO was spent\ninput.spentAtBlock       // Long: Block number when spent\ninput.spentAtBlockHash   // String: Block hash when spent\ninput.spentBlockTime     // Long: Block timestamp when spent\ninput.spentEpoch         // Integer: Epoch when spent\ninput.spentTxHash        // String: Transaction hash that spent this UTXO","smart-contract-classes#Smart Contract Classes":"","datum#Datum":"Purpose: Represents datum data in smart contracts (see script.datum.save)Mutability: Mutable (getters and setters)Key Fields:\n// Datum identification\ndatum.hash                // String: Datum hash\ndatum.datum               // String: CBOR representation\ndatum.createdAtTx         // String: Created at tx hash","script#Script":"Purpose: Represents script definitions (see script.save)Mutability: Mutable (getters and setters)\nNested Classes: ScriptType (enum)Key Fields:\n// Script identification\nscript.scriptHash            // String: Script hash\nscript.scriptType            // ScriptType: Script type\nscript.content               // String: Script content","txscript#TxScript":"Purpose: Represents script execution in transactions (see script.tx_script.save)Mutability: Mutable (getters and setters)\nNested Classes: RedeemerTag (enum), ScriptType (enum)Key Fields:\n// Transaction reference\ntxScript.txHash          // String: Transaction hash\ntxScript.slot            // Long: Slot number\ntxScript.blockHash       // String: Block hash\n// Script execution context\ntxScript.scriptHash      // String: Script hash\ntxScript.type            // ScriptType: Script type\ntxScript.redeemerCbor    // String: Redeemer CBOR data\ntxScript.datum           // String: Datum data\ntxScript.datumHash       // String: Datum hash\ntxScript.unitMem         // BigInteger: Memory units consumed\ntxScript.unitSteps       // BigInteger: CPU steps consumed\ntxScript.purpose         // RedeemerTag: Script execution purpose\ntxScript.redeemerIndex   // Integer: Redeemer index\ntxScript.redeemerData    // String: Redeemer data\ntxScript.redeemerDatahash // String: Redeemer data hash","staking-classes#Staking Classes":"","poolregistration#PoolRegistration":"Purpose: Represents stake pool registration certificates (see staking.pool_registration.save)Mutability: Mutable (getters and setters)\nNested Classes: RelayKey Fields:\n// Transaction reference\npool.txHash              // String: Transaction hash\npool.certIndex           // int: Certificate index\npool.txIndex             // int: Transaction index\npool.slot                // long: Slot number\npool.blockHash           // String: Block hash\npool.epoch               // int: Epoch number\n// Pool identification\npool.poolId              // String: Pool ID (hex)\npool.vrfKeyHash          // String: VRF key hash\npool.pledge              // BigInteger: Pool pledge in lovelace\npool.cost                // BigInteger: Pool cost in lovelace\npool.margin              // double: Pool margin\npool.marginNumerator     // BigInteger: Margin numerator\npool.marginDenominator   // BigInteger: Margin denominator\n// Pool metadata\npool.rewardAccount       // String: Reward account\npool.poolOwners          // Set<String>: Pool owner stake keys\npool.relays              // List<Relay>: Pool relays\npool.metadataUrl         // String: Pool metadata URL\npool.metadataHash        // String: Pool metadata hash","poolretirement#PoolRetirement":"Purpose: Represents stake pool retirement certificates (see staking.pool_retirement.save)Mutability: Mutable (getters and setters)Key Fields:\n// Transaction reference\nretirement.txHash        // String: Transaction hash\nretirement.certIndex     // int: Certificate index\nretirement.txIndex       // int: Transaction index\nretirement.slot          // long: Slot number\nretirement.blockHash     // String: Block hash\nretirement.epoch         // int: Epoch number\n// Retirement details\nretirement.poolId        // String: Pool ID being retired\nretirement.retirementEpoch // int: Epoch when pool retires","pool#Pool":"Purpose: Represents current pool state (see staking.pool.save)Mutability: Mutable (getters and setters)\nNested Classes: PoolStatusType (enum)Key Fields:\n// Transaction reference\npool.txHash              // String: Transaction hash\npool.certIndex           // Integer: Certificate index\npool.txIndex             // Integer: Transaction index\npool.slot                // Long: Slot number\npool.blockHash           // String: Block hash\npool.epoch               // Integer: Epoch number\n// Pool state\npool.poolId              // String: Pool ID\npool.status              // PoolStatusType: Pool status\npool.amount              // BigInteger: Pool amount\npool.activeEpoch         // Integer: Active epoch\npool.retireEpoch         // Integer: Retirement epoch\npool.registrationSlot    // Long: Registration slot","stakeregistrationdetail#StakeRegistrationDetail":"Purpose: Represents stake key registration/deregistration (see staking.key_registration.save)Mutability: Mutable (getters and setters)\nNested Classes: CredentialType (enum), CertificateType (enum)Key Fields:\n// Transaction reference\nreg.txHash               // String: Transaction hash\nreg.certIndex            // int: Certificate index\nreg.txIndex              // int: Transaction index\nreg.slot                 // long: Slot number\nreg.blockHash            // String: Block hash\nreg.epoch                // int: Epoch number\n// Registration details\nreg.credential           // String: Stake credential\nreg.credentialType       // CredentialType: Credential type\nreg.address              // String: Stake address\nreg.type                 // CertificateType: Certificate type","delegation#Delegation":"Purpose: Represents stake delegation operations (see staking.key_delegation.save)Mutability: Mutable (getters and setters)\nNested Classes: CredentialType (enum)Key Fields:\n// Transaction reference\ndelegation.txHash        // String: Transaction hash\ndelegation.certIndex     // int: Certificate index\ndelegation.txIndex       // int: Transaction index\ndelegation.slot          // long: Slot number\ndelegation.blockHash     // String: Block hash\ndelegation.epoch         // int: Epoch number\n// Delegation details\ndelegation.credential    // String: Delegating credential\ndelegation.credentialType // CredentialType: Credential type\ndelegation.address       // String: Delegating stake address\ndelegation.poolId        // String: Target pool ID","relay#Relay":"Purpose: Represents stake pool relay information (used in PoolRegistration.relays)Mutability: Mutable (getters and setters)Key Fields:\n// Network configuration\nrelay.port               // Integer: Port number\nrelay.ipv4               // String: IPv4 address\nrelay.ipv6               // String: IPv6 address\nrelay.dnsName            // String: DNS name\nUsage Example:\ndef analyzePoolRelays(items) {\n    for (pool : items) {\n        if (pool.relays != null) {\n            System.out.println(\"Pool \" + pool.poolId + \" has \" + pool.relays.size() + \" relays:\");\n            for (relay : pool.relays) {\n                if (relay.dnsName != null) {\n                    System.out.println(\"  DNS: \" + relay.dnsName + \":\" + relay.port);\n                } else if (relay.ipv4 != null) {\n                    System.out.println(\"  IPv4: \" + relay.ipv4 + \":\" + relay.port);\n                } else if (relay.ipv6 != null) {\n                    System.out.println(\"  IPv6: \" + relay.ipv6 + \":\" + relay.port);\n                }\n            }\n        }\n    }\n    return items;\n}","governance-classes-conway-era#Governance Classes (Conway Era)":"","govactionproposal#GovActionProposal":"Purpose: Represents governance action proposals (see governance.gov_action_proposal.save)Mutability: Mutable (getters and setters)\nNested Classes: GovActionType (enum)Key Fields:\n// Transaction reference\nproposal.txHash          // String: Transaction hash\nproposal.index           // long: Proposal index\nproposal.txIndex         // int: Transaction index\nproposal.slot            // Long: Slot number\nproposal.epoch           // Integer: Epoch number\n// Proposal details\nproposal.deposit         // BigInteger: Proposal deposit\nproposal.returnAddress   // String: Return address\nproposal.type            // GovActionType: Action type\nproposal.details         // JsonNode: Proposal details\nproposal.anchorUrl       // String: Anchor URL\nproposal.anchorHash      // String: Anchor hash","votingprocedure#VotingProcedure":"Purpose: Represents votes on governance proposals (see governance.voting_procedure.save)Mutability: Mutable (getters and setters)\nNested Classes: VoterType (enum), Vote (enum)Key Fields:\n// Transaction reference\nvote.txHash              // String: Transaction hash\nvote.index               // long: Vote index\nvote.txIndex             // int: Transaction index\nvote.slot                // Long: Slot number\nvote.epoch               // Integer: Epoch number\n// Vote details\nvote.voterType           // VoterType: Voter type\nvote.voterHash           // String: Voter hash\nvote.govActionTxHash     // String: Governance action transaction hash\nvote.govActionIndex      // Integer: Governance action index\nvote.vote                // Vote: Vote value\nvote.anchorUrl           // String: Anchor URL\nvote.anchorHash          // String: Anchor hash","drepregistration#DRepRegistration":"Purpose: Represents DRep registration certificates (see governance.drep_registration.save)Mutability: Mutable (getters and setters)\nNested Classes: CertificateType (enum), StakeCredType (enum)Key Fields:\n// Transaction reference\ndrep.txHash              // String: Transaction hash\ndrep.certIndex           // long: Certificate index\ndrep.txIndex             // int: Transaction index\ndrep.slot                // Long: Slot number\ndrep.epoch               // Integer: Epoch number\n// DRep registration\ndrep.type                // CertificateType: Certificate type\ndrep.deposit             // BigInteger: Registration deposit\ndrep.drepHash            // String: DRep hash\ndrep.drepId              // String: DRep ID\ndrep.anchorUrl           // String: Anchor URL\ndrep.anchorHash          // String: Anchor hash\ndrep.credType            // StakeCredType: Credential type","drep#DRep":"Purpose: Represents current DRep state (see governance.drep.save)Mutability: Mutable (getters and setters)\nNested Classes: CertificateType (enum), DRepStatus (enum)Key Fields:\n// Transaction reference\ndrep.txHash              // String: Transaction hash\ndrep.certIndex           // Integer: Certificate index\ndrep.txIndex             // Integer: Transaction index\ndrep.slot                // Long: Slot number\ndrep.blockHash           // String: Block hash\ndrep.epoch               // Integer: Epoch number\n// DRep state\ndrep.drepId              // String: DRep ID\ndrep.drepHash            // String: DRep hash\ndrep.certType            // CertificateType: Certificate type\ndrep.status              // DRepStatus: DRep status\ndrep.deposit             // BigInteger: Deposit amount\ndrep.registrationSlot    // Long: Registration slot","delegationvote#DelegationVote":"Purpose: Represents vote delegations to DReps (see governance.delegation_vote.save)Mutability: Mutable (getters and setters)\nNested Classes: DrepType (enum), StakeCredType (enum)Key Fields:\n// Transaction reference\ndelegation.txHash        // String: Transaction hash\ndelegation.certIndex     // long: Certificate index\ndelegation.txIndex       // int: Transaction index\ndelegation.slot          // Long: Slot number\ndelegation.epoch         // Integer: Epoch number\n// Vote delegation\ndelegation.address       // String: Delegating stake address\ndelegation.drepHash      // String: Target DRep hash\ndelegation.drepId        // String: Target DRep ID\ndelegation.drepType      // DrepType: DRep type\ndelegation.credential    // String: Delegating credential\ndelegation.credType      // StakeCredType: Credential type","committeeregistration#CommitteeRegistration":"Purpose: Represents constitutional committee registrations (see governance.committee_registration.save)Mutability: Mutable (getters and setters)\nNested Classes: StakeCredType (enum)Key Fields:\n// Transaction reference\ncommittee.txHash         // String: Transaction hash\ncommittee.certIndex      // long: Certificate index\ncommittee.txIndex        // int: Transaction index\ncommittee.slot           // Long: Slot number\ncommittee.epoch          // Integer: Epoch number\n// Committee registration\ncommittee.coldKey        // String: Cold key hash\ncommittee.hotKey         // String: Hot key hash\ncommittee.credType       // StakeCredType: Credential type","committeemember#CommitteeMember":"Purpose: Represents committee member state (see governance.committee_member.save)Mutability: Mutable (getters and setters)\nNested Classes: CredentialType (enum)Key Fields:\n// Member identification\nmember.hash              // String: Member hash\nmember.slot              // Long: Slot number\nmember.credType          // CredentialType: Credential type\nmember.epoch             // Integer: Epoch number\n// Member state\nmember.startEpoch        // Integer: Start epoch\nmember.expiredEpoch      // Integer: Expiration epoch","committeederegistration#CommitteeDeRegistration":"Purpose: Represents committee member deregistrations (see governance.committee_deregistration.save)Mutability: Mutable (getters and setters)\nNested Classes: StakeCredType (enum)Key Fields:\n// Transaction reference\ndereg.txHash             // String: Transaction hash\ndereg.certIndex          // long: Certificate index\ndereg.txIndex            // int: Transaction index\ndereg.slot               // Long: Slot number\ndereg.epoch              // Integer: Epoch number\n// Deregistration\ndereg.anchorUrl          // String: Anchor URL\ndereg.anchorHash         // String: Anchor hash\ndereg.coldKey            // String: Cold key being deregistered\ndereg.credType           // StakeCredType: Credential type","event-specific-domain-classes#Event-Specific Domain Classes":"These domain classes are used specifically in event contexts and are not part of the main storage domain classes.","txinputoutput#TxInputOutput":"Purpose: Represents UTXO changes in transactions (used in AddressUtxoEvent)Mutability: Immutable (getters only)\nNested Classes: TxInput, AddressUtxoKey Fields:\n// Transaction reference\ntxInputOutput.txHash     // String: Transaction hash\ntxInputOutput.inputs     // List<TxInput>: Transaction inputs\ntxInputOutput.outputs    // List<AddressUtxo>: Transaction outputs","txcertificates#TxCertificates":"Purpose: Represents certificates in transactions (used in CertificateEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxCerts.txHash           // String: Transaction hash\ntxCerts.txIndex          // int: Transaction index\ntxCerts.certificates     // List<Certificate>: Certificate data (yaci-core)","txmintburn#TxMintBurn":"Purpose: Represents asset mint/burn operations (used in MintBurnEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxMintBurn.txHash        // String: Transaction hash\ntxMintBurn.amounts       // List<Amount>: Asset amounts (see [`Amount`](#amount))","txgovernance#TxGovernance":"Purpose: Represents governance data in transactions (used in GovernanceEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxGov.txHash             // String: Transaction hash\ntxGov.txIndex            // int: Transaction index\ntxGov.votingProcedures   // VotingProcedures: Voting data (see [`VotingProcedures`](#votingprocedures-1))\ntxGov.proposalProcedures // List<ProposalProcedure>: Proposal data (see [`ProposalProcedure`](#proposalprocedure))","txauxdata#TxAuxData":"Purpose: Represents auxiliary/metadata in transactions (used in AuxDataEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxAux.txHash             // String: Transaction hash\ntxAux.auxData            // AuxData: Auxiliary data (yaci-core)","txupdate#TxUpdate":"Purpose: Represents protocol updates in transactions (used in UpdateEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxUpdate.txHash          // String: Transaction hash\ntxUpdate.update          // Update: Protocol update data (yaci-core)","txscripts#TxScripts":"Purpose: Represents script data in transactions (used in ScriptEvent)Mutability: Immutable (getters only)Key Fields:\n// Transaction reference\ntxScripts.txHash         // String: Transaction hash\ntxScripts.plutusV1Scripts // List<PlutusScript>: Plutus V1 scripts (yaci-core)\ntxScripts.plutusV2Scripts // List<PlutusScript>: Plutus V2 scripts (yaci-core)\ntxScripts.plutusV3Scripts // List<PlutusScript>: Plutus V3 scripts (yaci-core)\ntxScripts.nativeScripts  // List<NativeScript>: Native scripts (yaci-core)\ntxScripts.datums         // List<Datum>: Script datums (yaci-core)\ntxScripts.redeemers      // List<Redeemer>: Script redeemers (yaci-core)","outputdatumcontext#OutputDatumContext":"Purpose: Represents output datum context (used in DatumEvent)Mutability: Immutable (getters only)\nNested Classes: DatumKey Fields:\n// Output context\noutputDatum.txHash       // String: Transaction hash\noutputDatum.outputIndex  // Integer: Output index\noutputDatum.outputAddress // String: Output address\noutputDatum.datum        // Datum: Datum data","witnessdatumcontext#WitnessDatumContext":"Purpose: Represents witness datum context (used in DatumEvent)Mutability: Immutable (getters only)\nNested Classes: DatumKey Fields:\n// Witness context\nwitnessDatum.txHash      // String: Transaction hash\nwitnessDatum.datum       // Datum: Datum data","transaction#Transaction":"Purpose: Represents complete transaction data from yaci-helper (used in TransactionEvent)Mutability: Mutable (getters and setters)\nNested Classes: TransactionBody, Utxo, Witnesses, AuxDataKey Fields:\n// Transaction context\ntx.blockNumber           // long: Block number\ntx.slot                  // long: Slot number\ntx.txHash                // String: Transaction hash\ntx.invalid               // boolean: Whether transaction is invalid\n// Transaction data\ntx.body                  // TransactionBody: Transaction body\ntx.utxos                 // List<Utxo>: Transaction UTXOs\ntx.collateralReturnUtxo  // Utxo: Collateral return UTXO\ntx.witnesses             // Witnesses: Transaction witnesses\ntx.auxData               // AuxData: Auxiliary data/metadata\nUsage Example:\ndef analyzeTransactions(items) {\n    for (tx : items) {\n        System.out.println(\"Transaction: \" + tx.txHash);\n        System.out.println(\"Block: \" + tx.blockNumber + \", Slot: \" + tx.slot);\n        System.out.println(\"Fee: \" + (tx.body.fee / 1000000) + \" ADA\");\n        System.out.println(\"Inputs: \" + tx.body.inputs.size());\n        System.out.println(\"Outputs: \" + tx.body.outputs.size());\n        // Check for smart contract interaction\n        if (tx.witnesses.plutusV1Scripts.size() > 0 || tx.witnesses.plutusV2Scripts.size() > 0) {\n            System.out.println(\"Smart contract transaction detected\");\n        }\n        // Check for metadata\n        if (tx.auxData != null && tx.auxData.metadataJson != null) {\n            System.out.println(\"Transaction has metadata\");\n        }\n    }\n    return items;\n}","transactionbody#TransactionBody":"Purpose: Represents transaction body data (yaci-core class)Mutability: Immutable (builder pattern)\nNested Classes: TransactionInput, TransactionOutput, AmountKey Fields:\n// Basic transaction data\nbody.txHash              // String: Transaction hash\nbody.fee                 // BigInteger: Transaction fee\nbody.ttl                 // long: Time to live\nbody.validityIntervalStart // long: Validity interval start\n// Transaction structure\nbody.inputs              // Set<TransactionInput>: Transaction inputs\nbody.outputs             // List<TransactionOutput>: Transaction outputs\nbody.collateralInputs    // Set<TransactionInput>: Collateral inputs\nbody.referenceInputs     // Set<TransactionInput>: Reference inputs\nbody.collateralReturn    // TransactionOutput: Collateral return\nbody.totalCollateral     // BigInteger: Total collateral\n// Advanced features\nbody.certificates        // List<Certificate>: Certificates\nbody.withdrawals         // Map<String, BigInteger>: Stake withdrawals\nbody.mint                // List<Amount>: Minted assets (see [`Amount`](#amount))\nbody.requiredSigners     // Set<String>: Required signers\n// Metadata and scripts\nbody.auxiliaryDataHash   // String: Metadata hash\nbody.scriptDataHash      // String: Script data hash\n// Governance (Conway era)\nbody.votingProcedures    // VotingProcedures: Governance votes (see [`VotingProcedures`](#votingprocedures-1))\nbody.proposalProcedures  // List<ProposalProcedure>: Governance proposals (see [`ProposalProcedure`](#proposalprocedure))","utxo#Utxo":"Purpose: Represents UTXO data from yaci-helperMutability: Mutable (getters and setters)\nNested Classes: AmountKey Fields:\n// UTXO identification\nutxo.txHash              // String: Transaction hash\nutxo.index               // int: Output index\nutxo.address             // String: Address\n// Value and assets\nutxo.amounts             // List<Amount>: Asset amounts (see [`Amount`](#amount))\n// Smart contract data\nutxo.datumHash           // String: Datum hash\nutxo.inlineDatum         // String: Inline datum\nutxo.scriptRef           // String: Script reference","witnesses#Witnesses":"Purpose: Represents transaction witnesses (yaci-core class)Mutability: Immutable (builder pattern)Key Fields:\n// Signature witnesses\nwitnesses.vkeyWitnesses  // List<VkeyWitness>: Verification key witnesses\nwitnesses.bootstrapWitnesses // List<BootstrapWitness>: Bootstrap witnesses\n// Script witnesses\nwitnesses.nativeScripts  // List<NativeScript>: Native scripts\nwitnesses.plutusV1Scripts // List<PlutusScript>: Plutus V1 scripts\nwitnesses.plutusV2Scripts // List<PlutusScript>: Plutus V2 scripts\nwitnesses.plutusV3Scripts // List<PlutusScript>: Plutus V3 scripts\n// Script execution data\nwitnesses.datums         // List<Datum>: Script datums\nwitnesses.redeemers      // List<Redeemer>: Script redeemers","auxdata#AuxData":"Purpose: Represents auxiliary data/metadata (yaci-core class)Mutability: ImmutableKey Fields:\n// Metadata\nauxData.metadataCbor     // String: Metadata in CBOR format\nauxData.metadataJson     // String: Metadata in JSON format\n// Scripts\nauxData.nativeScripts    // List<NativeScript>: Native scripts\nauxData.plutusV1Scripts  // List<PlutusScript>: Plutus V1 scripts\nauxData.plutusV2Scripts  // List<PlutusScript>: Plutus V2 scripts\nauxData.plutusV3Scripts  // List<PlutusScript>: Plutus V3 scripts","transactioninput#TransactionInput":"Purpose: Represents transaction input reference (yaci-core class)Key Fields:\ninput.transactionId      // String: Referenced transaction ID\ninput.index              // int: Referenced output index","transactionoutput#TransactionOutput":"Purpose: Represents transaction output (yaci-core class)Nested Classes: AmountKey Fields:\noutput.address           // String: Output address\noutput.amounts           // List<Amount>: Output amounts (see [`Amount`](#amount))\noutput.datumHash         // String: Datum hash\noutput.inlineDatum       // String: Inline datum\noutput.scriptRef         // String: Script reference","amount#Amount":"Purpose: Represents asset amounts in yaci-core (different from yaci-store Amt)Key Fields:\namount.unit              // String: Asset unit\namount.policyId          // String: Policy ID\namount.assetName         // String: Asset name\namount.assetNameBytes    // byte[]: Asset name bytes\namount.quantity          // BigInteger: Asset quantity","votingprocedures#VotingProcedures":"Purpose: Represents governance voting procedures (yaci-core governance class)Mutability: Mutable\nNested Classes: Voter, GovActionId, VotingProcedureKey Fields:\n// Voting structure\nvotingProcs.voting       // Map<Voter, Map<GovActionId, VotingProcedure>>: Nested voting map\nUsage Example:\ndef analyzeVotingProcedures(items) {\n    for (txGov : items) {\n        if (txGov.votingProcedures != null && txGov.votingProcedures.voting != null) {\n            voterMap = txGov.votingProcedures.voting;\n            System.out.println(\"Voters in transaction: \" + voterMap.size());\n            for (voter : voterMap.keySet()) {\n                govActions = voterMap.get(voter);\n                System.out.println(\"Voter \" + voter.hash + \" voted on \" + govActions.size() + \" actions\");\n                for (actionId : govActions.keySet()) {\n                    vote = govActions.get(actionId);\n                    System.out.println(\"  Vote: \" + vote.vote + \" on action \" + actionId.transactionId);\n                }\n            }\n        }\n    }\n    return items;\n}","proposalprocedure#ProposalProcedure":"Purpose: Represents governance proposal procedures (yaci-core governance class)Mutability: Mutable\nNested Classes: GovAction, AnchorKey Fields:\n// Proposal details\nproposal.deposit         // BigInteger: Proposal deposit amount\nproposal.rewardAccount   // String: Reward account\nproposal.govAction       // GovAction: Governance action\nproposal.anchor          // Anchor: Metadata anchor\nUsage Example:\ndef analyzeProposals(items) {\n    for (txGov : items) {\n        if (txGov.proposalProcedures != null) {\n            for (proposal : txGov.proposalProcedures) {\n                depositAda = proposal.deposit / 1000000;\n                System.out.println(\"Proposal deposit: \" + depositAda + \" ADA\");\n                System.out.println(\"Action type: \" + proposal.govAction.type);\n                System.out.println(\"Reward account: \" + proposal.rewardAccount);\n                if (proposal.anchor != null) {\n                    System.out.println(\"Metadata URL: \" + proposal.anchor.anchorUrl);\n                }\n            }\n        }\n    }\n    return items;\n}","voter#Voter":"Purpose: Represents a governance voter (yaci-core governance class)Key Fields:\nvoter.type               // VoterType: Voter type (DREP, SPO, Committee)\nvoter.hash               // String: Voter key/script hash","govactionid#GovActionId":"Purpose: Represents governance action identifier (yaci-core governance class)Key Fields:\nactionId.transactionId   // String: Transaction ID\nactionId.govActionIndex  // Integer: Action index within transaction","votingprocedure-1#VotingProcedure":"Purpose: Represents individual voting procedure (yaci-core governance class)Nested Classes: Vote, AnchorKey Fields:\nvotingProc.vote          // Vote: Vote value (YES, NO, ABSTAIN)\nvotingProc.anchor        // Anchor: Vote metadata anchor","govaction#GovAction":"Purpose: Interface for governance actions (yaci-core governance class)Key Fields:\ngovAction.type           // GovActionType: Action type (PARAMETER_CHANGE, HARD_FORK, etc.)","anchor#Anchor":"Purpose: Represents metadata anchor (yaci-core governance class)Key Fields:\nanchor.anchorUrl         // String: Metadata URL\nanchor.anchorDataHash    // String: Metadata hash","nesteddependent-classes#Nested/Dependent Classes":"These classes are used as field types within the main domain classes. Understanding these is crucial for accessing nested data in plugins.","core-nested-classes#Core Nested Classes":"","amt#Amt":"Purpose: Represents native asset amounts (used in AddressUtxo.amounts, TxOuput.amounts)Key Fields:\n// Asset identification\namount.unit              // String: Asset unit (policy + asset name)\namount.policyId          // String: Policy ID\namount.assetName         // String: Asset name\namount.quantity          // BigInteger: Asset quantity\nUsage Example:\nMVEL Example:\ndef analyzeAssets(items) {\n    for (utxo : items) {\n        if (utxo.amounts != null) {\n            for (amount : utxo.amounts) {\n                System.out.println(\"Asset: \" + amount.policyId + \".\" + amount.assetName);\n                System.out.println(\"Quantity: \" + amount.quantity);\n                // Check if it's an NFT\n                if (amount.quantity == 1) {\n                    System.out.println(\"NFT detected: \" + amount.unit);\n                }\n            }\n        }\n    }\n    return items;\n}","vrf#Vrf":"Purpose: Represents VRF (Verifiable Random Function) data (used in Block.nonceVrf, Block.leaderVrf, Block.vrfResult)Key Fields:\n// VRF data\nvrf.output               // String: VRF output\nvrf.proof                // String: VRF proof","utxokey#UtxoKey":"Purpose: Represents UTXO reference (used in Txn.inputs, Txn.outputs, etc.)Key Fields:\n// UTXO reference\nutxoKey.txHash           // String: Transaction hash\nutxoKey.outputIndex      // Integer: Output index","txouput#TxOuput":"Purpose: Represents transaction output data (used in Txn.collateralReturnJson)Nested Classes: AmtKey Fields:\n// Output details\noutput.address           // String: Output address\noutput.amounts           // List<Amt>: Asset amounts\noutput.dataHash          // String: Datum hash\noutput.inlineDatum       // String: Inline datum\noutput.referenceScriptHash // String: Reference script hash","amount-1#Amount":"Purpose: Alternative asset amount representation (used in some contexts)Key Fields:\n// Simple amount\namount.unit              // String: Asset unit\namount.quantity          // BigInteger: Quantity","rewardamt#RewardAmt":"Purpose: Represents reward amounts (used in reward-related events)Nested Classes: RewardType (enum)Key Fields:\n// Reward details\nreward.rewardType        // RewardType: Type of reward\nreward.poolId            // String: Pool ID\nreward.address           // String: Reward address\nreward.amount            // BigInteger: Reward amount","blockawaredomain#BlockAwareDomain":"Purpose: Base class providing block context (extended by many domain classes)Key Fields:\n// Block context\nentity.blockNumber       // Long: Block number\nentity.blockTime         // Long: Block timestamp","enum-classes#Enum Classes":"These enum values are used throughout the domain classes to represent specific states or types.Enum values are accessed using name() method in plugin script.Example:\nif (asset.mintType.name() == \"MINT\") {\n    // Handle mint operation\n}","minttype#MintType":"Purpose: Represents asset minting operation type (used in TxAsset.mintType)Values:\n\"MINT\" - Asset minting operation\n\"BURN\" - Asset burning operation\ndef filterMintOperations(items) {\n    mints = [];\n    burns = [];\n    for (asset : items) {\n        if (asset.mintType.name() == \"MINT\") {\n            mints.add(asset);\n        } else if (asset.mintType.name() == \"BURN\") {\n            burns.add(asset);\n        }\n    }\n    System.out.println(\"Mints: \" + mints.size() + \", Burns: \" + burns.size());\n    return items;\n}","scripttype#ScriptType":"Purpose: Represents script types (used in Script.type, TxScript.type)Values:\n\"NATIVE_SCRIPT\" - Native script\n\"PLUTUS_V1\" - Plutus V1 script\n\"PLUTUS_V2\" - Plutus V2 script\n\"PLUTUS_V3\" - Plutus V3 script","rewardtype#RewardType":"Purpose: Represents reward types (used in RewardAmt.rewardType)Values:\n\"member\" - Pool member reward\n\"leader\" - Pool leader reward\n\"refund\" - Deposit refund","redeemertag#RedeemerTag":"Purpose: Represents script execution purpose (used in TxScript.purpose, Redeemer.tag)Common Values:\n\"Spend\" - Spending script\n\"Mint\" - Minting script\n\"Cert\" - Certificate script\n\"Reward\" - Reward script\n\"Voting\" - Voting script\n\"Proposing\" - Proposing script","vote#Vote":"Purpose: Represents governance vote values (used in VotingProcedure.vote)Values:\n\"YES\" - Yes vote\n\"NO\" - No vote\n\"ABSTAIN\" - Abstain vote","votertype#VoterType":"Purpose: Represents governance voter types (used in VotingProcedure.voterType)Values:\n\"CONSTITUTIONAL_COMMITTEE_HOT_KEY_HASH\" - Constitutional Committee Hot Key Hash\n\"CONSTITUTIONAL_COMMITTEE_HOT_SCRIPT_HASH\" - Constitutional Committee Hot Script Hash\n\"DREP_KEY_HASH\" - DRep Key Hash\n\"DREP_SCRIPT_HASH\" - DRep Script Hash\n\"STAKING_POOL_KEY_HASH\" - Staking Pool Key Hash","poolstatustype#PoolStatusType":"Purpose: Represents pool status types (used in Pool.status)Values:\n\"REGISTRATION\" - Pool registration\n\"UPDATE\" - Pool update\n\"RETIRING\" - Pool retiring\n\"RETIRED\" - Pool retired","certificatetype#CertificateType":"Purpose: Represents certificate types (used in StakeRegistrationDetail.type, DRepRegistration.type, DRep.certType)Values:\n\"STAKE_REGISTRATION\" - Stake key registration\n\"STAKE_DEREGISTRATION\" - Stake key deregistration\n\"STAKE_DELEGATION\" - Stake delegation\n\"POOL_REGISTRATION\" - Pool registration\n\"POOL_RETIREMENT\" - Pool retirement\n\"GENESIS_KEY_DELEGATION\" - Genesis key delegation\n\"MOVE_INSTATENEOUS_REWARDS_CERT\" - Move instantaneous rewards certificate\n\"REG_CERT\" - Registration certificate\n\"UNREG_CERT\" - Unregistration certificate\n\"VOTE_DELEG_CERT\" - Vote delegation certificate\n\"STAKE_VOTE_DELEG_CERT\" - Stake vote delegation certificate\n\"STAKE_REG_DELEG_CERT\" - Stake registration delegation certificate\n\"VOTE_REG_DELEG_CERT\" - Vote registration delegation certificate\n\"STAKE_VOTE_REG_DELEG_CERT\" - Stake vote registration delegation certificate\n\"AUTH_COMMITTEE_HOT_CERT\" - Authorize committee hot certificate\n\"RESIGN_COMMITTEE_COLD_CERT\" - Resign committee cold certificate\n\"REG_DREP_CERT\" - Register DRep certificate\n\"UNREG_DREP_CERT\" - Unregister DRep certificate\n\"UPDATE_DREP_CERT\" - Update DRep certificate","dreptype#DrepType":"Purpose: Represents DRep types (used in DelegationVote.drepType)Values:\n\"ADDR_KEYHASH\" - Address key hash\n\"SCRIPTHASH\" - Script hash\n\"ABSTAIN\" - Abstain\n\"NO_CONFIDENCE\" - No confidence","stakecredtype#StakeCredType":"Purpose: Represents stake credential types (used in DRepRegistration.credType, DelegationVote.credType, CommitteeRegistration.credType, CommitteeDeRegistration.credType)Values:\n\"ADDR_KEYHASH\" - Address key hash\n\"SCRIPTHASH\" - Script hash","credentialtype#CredentialType":"Purpose: Represents credential types (used in StakeRegistrationDetail.credentialType, Delegation.credentialType, CommitteeMember.credType)Values:\n\"ADDR_KEYHASH\" - Address key hash\n\"SCRIPTHASH\" - Script hash","govactiontype#GovActionType":"Purpose: Represents governance action types (used in GovActionProposal.type)Values:\n\"PARAMETER_CHANGE_ACTION\" - Parameter change action\n\"HARD_FORK_INITIATION_ACTION\" - Hard fork initiation action\n\"TREASURY_WITHDRAWALS_ACTION\" - Treasury withdrawals action\n\"NO_CONFIDENCE\" - No confidence action\n\"UPDATE_COMMITTEE\" - Update committee action\n\"NEW_CONSTITUTION\" - New constitution action\n\"INFO_ACTION\" - Info action","drepstatus#DRepStatus":"Purpose: Represents DRep status (used in DRep.status)Values:\n\"REGISTERED\" - DRep registered\n\"UPDATED\" - DRep updated\n\"RETIRED\" - DRep retired","external-dependencies#External Dependencies":"Some classes are imported from the yaci-core library and represent standard Cardano data structures:\nRelay - Pool relay information\nCertificate - Cardano certificates\nExUnits - Execution units for scripts\nUnitInterval - Values between 0 and 1\nNonNegativeInterval - Non-negative numeric intervals\nThese external classes follow similar patterns and can be accessed using standard field notation in plugins.","yaci-core-classes#Yaci-Core Classes":"These classes are from the yaci-core library and are used in various events:","block-yaci-core#Block (yaci-core)":"Purpose: Represents a complete Cardano block structure from yaci-core (used in BlockEvent)Package: com.bloxbean.cardano.yaci.core.model.BlockKey Fields:\n// Block era\nblock.era                // Era: Cardano era (Byron, Shelley, Allegra, Mary, Alonzo, Babbage, Conway)\n// Block header\nblock.header             // BlockHeader: Block header information\nblock.header.headerBody  // HeaderBody: Header body with block metadata\nblock.header.bodySignature // String: Body signature\n// Transaction data\nblock.transactionBodies  // List<TransactionBody>: Transaction bodies\nblock.transactionWitness // List<Witnesses>: Transaction witnesses\nblock.auxiliaryDataMap   // Map<Integer, AuxData>: Auxiliary data by index\nblock.invalidTransactions // List<Integer>: Invalid transaction indices\n// Raw data\nblock.cbor               // String: CBOR representation of the block","blockheader-yaci-core#BlockHeader (yaci-core)":"Purpose: Contains block header informationKey Fields:\nheader.headerBody        // HeaderBody: Header body data\nheader.bodySignature     // String: Body signature","headerbody-yaci-core#HeaderBody (yaci-core)":"Purpose: Contains detailed block header metadataKey Fields:\n// Block identification\nheaderBody.blockNumber   // long: Block number\nheaderBody.slot          // long: Slot number\nheaderBody.prevHash      // String: Previous block hash\nheaderBody.blockHash     // String: Current block hash (derived)\n// Block producer\nheaderBody.issuerVkey    // String: Issuer verification key\nheaderBody.vrfVkey       // String: VRF verification key\n// VRF certificates\nheaderBody.nonceVrf      // VrfCert: Nonce VRF (removed in Babbage)\nheaderBody.leaderVrf     // VrfCert: Leader VRF (removed in Babbage)\nheaderBody.vrfResult     // VrfCert: VRF result (Babbage onwards)\n// Block structure\nheaderBody.blockBodySize // long: Body size in bytes\nheaderBody.blockBodyHash // String: Body hash\n// Operational data\nheaderBody.operationalCert // OperationalCert: Operational certificate\nheaderBody.protocolVersion // ProtocolVersion: Protocol version","vrfcert-yaci-core#VrfCert (yaci-core)":"Purpose: VRF certificate dataKey Fields:\nvrf._1                   // String: First component\nvrf._2                   // String: Second component","operationalcert-yaci-core#OperationalCert (yaci-core)":"Purpose: Operational certificate for block productionKey Fields:\nopCert.hotVKey           // String: Hot verification key\nopCert.sequenceNumber    // Integer: Sequence number\nopCert.kesPeriod         // Integer: KES period\nopCert.sigma             // String: Signature\nUsage Example:\ndef analyzeBlockStructure(event) {\n    block = event.block;\n    headerBody = block.header.headerBody;\n    // Era-specific handling\n    if (block.era == \"CONWAY\") {\n        System.out.println(\"Conway era block detected\");\n    }\n    // Check VRF data based on era\n    if (block.era == \"BABBAGE\" || block.era == \"CONWAY\") {\n        if (headerBody.vrfResult != null) {\n            System.out.println(\"VRF Result: \" + headerBody.vrfResult._1);\n        }\n    } else {\n        if (headerBody.nonceVrf != null) {\n            System.out.println(\"Nonce VRF: \" + headerBody.nonceVrf._1);\n        }\n    }\n    // Operational certificate\n    if (headerBody.operationalCert != null) {\n        System.out.println(\"KES Period: \" + headerBody.operationalCert.kesPeriod);\n        System.out.println(\"Sequence: \" + headerBody.operationalCert.sequenceNumber);\n    }\n    // Transaction analysis\n    System.out.println(\"Transaction count: \" + block.transactionBodies.size());\n    // Check for transactions with metadata\n    metadataCount = 0;\n    for (index : block.auxiliaryDataMap.keySet()) {\n        auxData = block.auxiliaryDataMap.get(index);\n        if (auxData != null) {\n            metadataCount++;\n        }\n    }\n    System.out.println(\"Transactions with metadata: \" + metadataCount);\n}\nThis comprehensive API reference provides plugin developers with all the information needed to build sophisticated blockchain data processing plugins for the yaci-store system."}},"/showcase":{"title":"Projects Using Yaci Store","data":{"":"Discover how organizations and developers are leveraging Yaci Store to build powerful Cardano applications.\nIs your project using Yaci Store? We'd love to feature it here! Please open a PR or create an issue.","community-projects#Community Projects":"","cardano-rosetta-java#Cardano Rosetta Java":"Cardano Foundation\nThe official Rosetta API implementation for Cardano, enabling seamless blockchain integration for exchanges and wallets. Built on Yaci Store for reliable blockchain data indexing.","fluidtokens-aquarium-node#FluidTokens Aquarium Node":"FluidTokens\nThe Aquarium Node is a java app which indexes FluidTokens users' Tanks utxos and processes Scheduled Transactions when conditions are met.","cf-cardano-ballot#CF Cardano Ballot":"Cardano Foundation\nCardano Ballot is a user-friendly, hybrid on- and off-chain voting system developed by the Cardano Foundation.\nCardano Ballot leverages a set of backend services combined with frontend applications to facilitate voting within the Cardano Ecosystem.","cf-reeve-platform#CF Reeve Platform":"Cardano Foundation\nThe Reeve platform is designed to integrate traditional accounting systems with blockchain technology, ensuring transparency, immutability, and enhanced security for financial records.","cf-adahandle-resolver#CF AdaHandle Resolver":"Cardano Foundation\nAn efficient resolution service for AdaHandle, Cardano's human-readable wallet address system, providing fast lookups and integration capabilities.","adamatic#AdaMatic":"Easy1 Staking","sundaeswap-scooper-analytics#SundaeSwap Scooper Analytics":"Easy1 Staking\nA simple crawler app that stores relevant scoop transaction info and serves aggreagate data over a rest endpoint.","cbi-backend-service#CBI Backend Service":"Cardano Fans (CRFA)","technical-integration-patterns#Technical Integration Patterns":"These projects demonstrate various integration patterns with Yaci Store:\nAPI Gateway Pattern: Cardano Rosetta uses Yaci Store as a data layer for standardized blockchain APIs\nEvent-Driven Architecture: FluidTokens leverages the event system for real-time token tracking\nAnalytics Pipeline: SundaeSwap Analytics uses selective stores for focused DeFi data\nMicroservices: AdaHandle Resolver runs as a lightweight service with minimal stores enabled\nGovernance Infrastructure: Ballot and Reeve platforms utilize governance stores for on-chain voting\nAutomation Workflows: AdaMatic integrates multiple stores for complex blockchain interactions","join-the-community#Join the Community":"Get started with Yaci Store and build your own Cardano application\nTell us about your project to be featured on this page"}},"/stores/configuration":{"title":"Store Configuration Guide","data":{"":"This guide covers the essential configuration options for yaci-store, including how to enable/disable stores and configure key properties for optimal performance.","store-configuration-flags#Store Configuration Flags":"","core-stores#Core Stores":"All stores are enabled by default. To disable a store, set its flag to false:\n# Core store flags\nstore.assets.enabled=true\nstore.blocks.enabled=true\nstore.epoch.enabled=true\nstore.metadata.enabled=true\nstore.mir.enabled=true\nstore.script.enabled=true\nstore.staking.enabled=true\nstore.transaction.enabled=true\nstore.utxo.enabled=true\nstore.governance.enabled=true","aggregation-modules#Aggregation Modules":"These modules are disabled by default and are enabled only for the ledger-state profile.\nWhile core store indexing is done in parallel, most of the processing in aggregation modules is sequential.\nTherefore, it is recommended to enable aggregation modules only when you need them.\n# Aggregation module flags (disabled by default)\nstore.account.enabled=false\nstore.adapot.enabled=false\nstore.governance-aggr.enabled=false\n# Epoch aggregation\nstore.epoch-aggr.enabled=false","api-control-flags#API Control Flags":"Each store can have its API independently disabled:\n# API control flags (all enabled by default when store is enabled)\nstore.assets.api-enabled=true\nstore.blocks.api-enabled=true\nstore.epoch.api-enabled=true\nstore.metadata.api-enabled=true\nstore.script.api-enabled=true\nstore.staking.api-enabled=true\nstore.transaction.api-enabled=true\nstore.utxo.api-enabled=true\nstore.mir.api-enabled=true\nstore.governance.api-enabled=true\nDisabling unnecessary stores can significantly reduce database storage requirements and improve sync performance.","network-configuration#Network Configuration":"","supported-networks#Supported Networks":"# Preprod (default)\nstore.cardano.host=preprod-node.play.dev.cardano.org\nstore.cardano.port=3001\nstore.cardano.protocol-magic=1\n# Preview\nstore.cardano.host=preview-node.play.dev.cardano.org\nstore.cardano.port=3001\nstore.cardano.protocol-magic=2\n# Mainnet\nstore.cardano.host=backbone.cardano.iog.io\nstore.cardano.port=3001\nstore.cardano.protocol-magic=764824073\n# Custom Network\nstore.cardano.host=<cardano_host>\nstore.cardano.port=<cardano_port>\nstore.cardano.protocol-magic=<protocol_magic>","local-node-configuration-optional#Local Node Configuration (Optional)":"Yaci Store can connect to a local node to fetch current protocol parameters and current governance state data through n2c. It can also be used to\nsubmit transactions. You can use either a Unix socket or a TCP socket (through socat) to connect to your local node.\nEven if the local node is configured for n2c, you still need to configure the store.cardano.host, store.cardano.port,\nand store.cardano.protocol-magic properties for indexing, as the indexing is done through the n2n protocol.\n# Unix socket (local node)\nstore.cardano.n2c-node-socket-path=/path/to/node.socket\n# Or TCP socket (remote node via socat)\nstore.cardano.n2c-host=192.168.0.228\nstore.cardano.n2c-port=31001","database-configuration#Database Configuration":"","h2-default---in-memory--file-based#H2 (Default - In-Memory / File-Based)":"Only for testing purposes, not recommended for production use.\nspring.datasource.url=jdbc:h2:mem:mydb\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.h2.console.enabled=true","postgresql#PostgreSQL":"spring.datasource.url=jdbc:postgresql://localhost:5432/yaci_indexer?currentSchema=preprod\nspring.datasource.username=user\nspring.datasource.password=password","mysql#MySQL":"spring.datasource.url=jdbc:mysql://localhost:3306/yaci_indexer\nspring.datasource.username=user\nspring.datasource.password=password","connection-pool-settings#Connection Pool Settings":"# HikariCP settings\nspring.datasource.hikari.maximum-pool-size=30\nspring.datasource.hikari.minimum-idle=5\n# Batch processing\nspring.jpa.properties.hibernate.jdbc.batch_size=100\nspring.jpa.properties.hibernate.order_inserts=true","performance-configuration#Performance Configuration":"","parallel-processing#Parallel Processing":"Parallel processing is enabled by default, but you can disable it if you want to run in sequential mode.\n# Enable parallel processing (recommended)\nstore.executor.enable-parallel-processing=true\n# Batch sizes\nstore.executor.blocks-batch-size=100\nstore.executor.blocks-partition-size=10\n# Virtual threads (Java 21+)\nstore.executor.use-virtual-thread-for-batch-processing=true\nstore.executor.use-virtual-thread-for-event-processing=true","database-insert-performance#Database Insert Performance":"# JOOQ batch settings\nstore.db.batch-size=1000\nstore.db.parallel-insert=true","sync-configuration#Sync Configuration":"","custom-start-point#Custom Start Point":"# Start from specific slot\nstore.cardano.sync-start-slot=2738868\nstore.cardano.sync-start-blockhash=\n# Stop at specific slot\nstore.cardano.sync-stop-slot=76667163\nstore.cardano.sync-stop-blockhash=","auto-start-control#Auto-start Control":"# Disable auto-start of sync\nstore.sync-auto-start=false","index-management#Index Management":"For public networks like mainnet, preprod, and preview, you still need to apply indexes manually or through admin-cli.\n# Auto-manage indexes during sync\nstore.auto-index-management=true","common-configuration-scenarios-examples#Common Configuration Scenarios (Examples)":"","scenario-1-nft-explorer#Scenario 1: NFT Explorer":"Focus on NFT-related data only:\n# Disable unnecessary stores\nstore.staking.enabled=false\nstore.mir.enabled=false\nstore.governance.enabled=false\nstore.epoch.enabled=false\n# Keep only NFT-relevant stores\nstore.assets.enabled=true\nstore.metadata.enabled=true\nstore.transaction.enabled=true\nstore.utxo.enabled=true","scenario-2-staking-analytics#Scenario 2: Staking Analytics":"Focus on staking and epoch data:\n# Disable non-staking stores\nstore.assets.enabled=false\nstore.metadata.enabled=false\nstore.script.enabled=false\nstore.utxo.enabled=false\n# Keep staking-relevant stores\nstore.staking.enabled=true\nstore.epoch.enabled=true\nstore.blocks.enabled=true\nstore.transaction.enabled=true","advanced-features#Advanced Features":"","pruning-configuration#Pruning Configuration":"By default, pruning is disabled for all stores. Enable pruning to automatically remove historical data and reduce storage requirements.","utxo-pruning#UTxO Pruning":"# Enable UTxO pruning\nstore.utxo.pruning-enabled=true\nstore.utxo.pruning.interval=600\nstore.utxo.pruning-safe-blocks=2160","transaction-pruning#Transaction Pruning":"# Enable transaction pruning\nstore.transaction.pruning-enabled=true\nstore.transaction.pruning.interval=86400","transaction-witness-saving#Transaction Witness Saving":"# Save transaction witness data (disabled by default to reduce storage)\nstore.transaction.save-witness=false","epoch-stake-pruning#Epoch Stake Pruning":"# Enable epoch stake pruning (for adapot module)\nstore.adapot.epoch-stake-pruning-enabled=true\nstore.adapot.epoch-stake-pruning-interval=86400\nstore.adapot.epoch-stake-safe-epochs=4","address-storage#Address Storage":"By default, addresses are not saved in address table. Enable this feature if you need to have all used addresses in address table.\n# Enable saving addresses to address table (default: false)\nstore.utxo.save-address=true\n# Enable address caching for better performance\nstore.utxo.address-cache-enabled=true\nstore.utxo.address-cache-size=100000","keep-alive-settings#Keep-Alive Settings":"# Maintain connection to node\nstore.cardano.keep-alive-interval=10000","transaction-submission-configuration-optional#Transaction Submission Configuration (Optional)":"Transaction submission is optional and disabled by default. You can enable it through multiple methods based on your infrastructure.\nYaci Store supports three methods for transaction submission, with the following priority order:\nSubmit API (Recommended)\n# Enable transaction submission via Submit API\nstore.cardano.submit-api-url=http://localhost:8090/api/submit/tx\nOgmios\n# Enable transaction submission and script cost evaluation via Ogmios\nstore.cardano.ogmios-url=http://ogmios-host:1337\nLocal N2C Protocol\n# Automatically enabled if n2c configuration is provided\n# See \"Local Node Configuration\" section above\nYou can combine Submit API for transaction submission with Ogmios for script cost evaluation by configuring both URLs. This provides the best of both services.","n2c-connection-pool-configuration#N2C Connection Pool Configuration":"When using N2C protocol for transaction submission:\n# N2C connection pool settings\nstore.cardano.n2c-pool-enabled=true\nstore.cardano.n2c-max-total=10\nstore.cardano.n2c-pool-min-idle=2\nstore.cardano.n2c-pool-max-idle=5\nstore.cardano.n2c-pool-max-wait-in-millis=10000","read-only-mode#Read-Only Mode":"# Enable read-only mode (no writes to database)\nstore.read-only-mode=true","fine-grained-data-control#Fine-Grained Data Control":"For more advanced control over what specific data gets stored within each enabled store, yaci-store provides a powerful plugin framework. This allows you to:\nFilter specific assets or transactions or other blockchain data\nTransform data before storage\nImplement business-specific logic\nLearn more about fine-grained data control using plugins in the Plugin Getting Started Guide.","best-practices#Best Practices":"Start minimal: Enable only the stores you need\nUse appropriate database: H2 for testing, PostgreSQL for production\nEnable parallel processing: Significantly improves sync performance\nMonitor resources: Adjust batch sizes based on available memory\nTest configurations: Always test on testnet before mainnet","monitoring-and-observability#Monitoring and Observability":"# Expose metrics endpoints\nmanagement.endpoints.web.exposure.include=health,info,prometheus\nmanagement.endpoint.health.show-details=always\n# Logging configuration\nlogging.file.name=./logs/yaci-store.log\nlogging.level.com.bloxbean.cardano.yaci.store.core.service=INFO","next-steps#Next Steps":"Explore Plugin Development for fine-grained control"}},"/stores/overview":{"title":"Stores Overview","data":{"introduction#Introduction":"Yaci Store is built on a modular architecture where different types of blockchain data are organized into separate modules called \"stores\". This design provides flexibility, scalability, and allows users to enable only the functionality they need.","architecture-overview#Architecture Overview":"","core-principles#Core Principles":"Modularity: Each store is independent and can be enabled/disabled based on requirements\nEvent-Driven: Stores react to blockchain events (blocks, transactions, etc.) published by the sync engine\nParallel Processing: Core stores process data in parallel for optimal performance\nExtensibility: Plugin framework allows customization without modifying core code","data-flow#Data Flow":"Cardano Node → Sync → Event Publisher →  Processors →  Storage implementations → Database\n                                             ↓                         ↓\n                                      Plugin Framework         Plugin Framework","store-categories#Store Categories":"","core-stores#Core Stores":"These stores handle fundamental blockchain data and are enabled by default:\nAssets Store: Manages native tokens, NFTs, and fungible tokens\nBlocks Store: Stores block-related information\nEpoch Store: Tracks epoch parameters, and epoch-specific data\nGovernance Store: Handles governance actions, proposals, votes, and DRep data\nMetadata Store: Stores transaction metadata\nMIR Store: Processes Move Instantaneous Rewards certificates\nScript Store: Manages Plutus scripts, native scripts, and script references\nStaking Store: Tracks stake pools, delegations, registrations, and rewards\nTransaction Store: Stores transaction data\nUTxO Store: Manages unspent transaction outputs and spending relationships","aggregation-modules#Aggregation Modules":"These modules perform complex calculations and are disabled by default:\nAccount: Calculates and maintains address balances over time\nAdapot: Tracks ADA distribution across different pots (treasury, reserves, etc.) and calculate rewards\nGovernance Aggregation: Calculate governance-related state\nEpoch Aggregation: Aggregates epoch level data"}},"/usage/getting-started-as-library":{"title":"Use Yaci Store as a Library","data":{"":"The power of Yaci Store is that it can be used as a library in your own application. This allows you to build your own application on top of Yaci Store.\nYou have full control over what data you want to index. This is achieved by using modular architecture. Not only you can include required stores in\nyour application, you can also override the default behavior of the stores. For example, you can override the default behavior of the Utxo store to store\nutxos in a different database, or store only utxos specific to an address or store metadata with specific labels. This is achieved by using the\nspring framework's dependency injection feature.In this guide, we will show you how to use Yaci Store as a library in your own application.Sample applications:\nSample Metadata Indexer project using Yaci Store as a library.\nA scoped indexer for Ada Handler","prerequisites#Prerequisites":"Java 21\nSpring Boot 3.2.x (Tested with Spring Boot 3.2.0, 3.2.1, 3.2.2)","create-a-spring-boot-application#Create a Spring Boot application":"You can use the Spring Initializr to create a Spring Boot application.","add-dependencies#Add Dependencies":"Apart from standard spring boot dependencies, add the following dependency to your build.gradle or pom.xml file.\nThis will add the Yaci Store Core modules to your project as a dependency. Core modules are responsible for fetching data from the blockchain and\npublishing them as events.\nimplementation 'com.bloxbean.cardano:yaci-store-spring-boot-starter:<version>'\nFor pom.xml\n<dependency>\n    <groupId>com.bloxbean.cardano</groupId>\n    <artifactId>yaci-store-spring-boot-starter</artifactId>\n    <version>{version}</version>\n</dependency>","add-required-store-starters#Add required store starters":"Now you can add the required store starters to your project. For example, if you want to add the metadata store, add the following dependency.\nimplementation 'com.bloxbean.cardano:yaci-store-metadata-spring-boot-starter:<version>'\nFor pom.xml\n<dependency>\n    <groupId>com.bloxbean.cardano</groupId>\n    <artifactId>yaci-store-metadata-spring-boot-starter</artifactId>\n    <version>{version}</version>\n</dependency>\nNote: You can add multiple store starters to your project. Full list of supported starters can be found here","configuration#Configuration":"Add following flyway configuration to your application.yml file. (Mandatory)\nspring:\n  flyway:\n    locations: classpath:db/store/{vendor}\n    out-of-order: true\napiPrefix: /api/v1\nNote: If you are using Yaci Store 0.0.11 or earlier, use classpath:db/migration/{vendor} as the location.You can add your application specific flyway configuration as well. For example, you may want to add another location for your application.\nFlyway location property allows you to specify multiple locations.","yaci-store-configuration-mandatory#Yaci Store Configuration (Mandatory)":"Download the application.properties file from the release section and place it in a folder named \"config\" in your project root directory.\nThe application will automatically pick up the configuration file.Alternatively, you can add all yaci store specific configurations in application.yml file as well.Update configuration file with your own values. Some of the key properties are mentioned below.","network-configuration#Network Configuration":"store.cardano.host=preprod-node.world.dev.cardano.org\nstore.cardano.port=30000\nstore.cardano.protocol-magic=1","database-configuration#Database Configuration":"Uncomment and edit the following properties to configure the database connection.\nspring.datasource.url=\nspring.datasource.username=user\nspring.datasource.password=","optional-configuration#Optional Configuration":"The followings are optional configuration. You can leave them as-is.","genesis-files-configuration#Genesis files Configuration":"Configure genesis files location. This is required for few stores like Utxo store, epoch store, account aggregate etc.\nIf you are using one of the public networks like mainnet, preprod, or preview, you don't need to configure these files as yaci store already includes them.\nstore.cardano.byron-genesis-file=/Users/satya/work/cardano-node/preprod/files/byron-genesis.json\nstore.cardano.shelley-genesis-file=/Users/satya/work/cardano-node/preprod/files/shelley-genesis.json\nstore.cardano.alonzo-genesis-file=/Users/satya/work/cardano-node/preprod/files/alonzo-genesis.json\nstore.cardano.conway-genesis-file=/Users/satya/work/cardano-node/preprod/files/conway-genesis.json","n2c-configuration#N2C Configuration":"The following properties are required for node-to-client (n2c) communication. This is required for transaction submission,\nfetching protocol parameters etc. If you don't need these functionalities, you can leave them commented.\n#store.cardano.n2c-node-socket-path=/Users/satya/work/cardano-node/preprod-9.0.0/db/node.socket\n# If you are accessing n2c through a relay like \"socat\", uncomment and edit the following properties.\n#store.cardano.n2c-host=<relay_host>\n#store.cardano.n2c-port=<relay_port>\nNow you are ready to use Yaci Store in your application. During application startup, Yaci Store will create all the required tables in the database and\nstart syncing the blockchain data and publish them as events and process them.","parallel-processing#Parallel Processing":"To enable parallel processing during the initial sync, which will significantly speed up the sync process, set the following properties:\nstore.executor.enable-parallel-processing=true\nstore.executor.blocks-batch-size=100\nstore.executor.blocks-partition-size=10\nstore.executor.use-virtual-thread-for-batch-processing=true\nstore.executor.use-virtual-thread-for-event-processing=true","customization---override-default-behavior#Customization - Override default behavior":"","custom-storage#Custom Storage":"Yaci Store provides a default storage implementation which stores all data in yaci store defined table.\nBut you can override this default implementation and provide your own storage implementation. Check out sample projects mentioned above for more details.For example: If you only want to store a specific metadata label, you can extend the default storage implementation and filter out the labels you want to store.","custom-processor#Custom Processor":"Ideally you don't need to have your own custom processor, but if you want to do some custom processing, you can listen to both core or derived events and do your custom processing.","rollback-handling#Rollback Handling":"If you are using default storage implementation or a custom storage by extending default storage, Yaci Store will automatically handle rollbacks.But if you have your own custom processor or different storage implementation using separate database/table, you need to handle rollbacks in your custom processor by listening to RollbackEvent.\nFor more details on how to handle rollbacks, check Rollback Handling and also make sure all your operations are idempotent.","remove-optional-indexes-during-initial-sync#Remove Optional Indexes During Initial Sync":"During the initial sync, you can remove some of the optional indexes that are not required. This can help speed up the sync process.\nTo get a list of all optional indexes specific to your store, you can check drop-index.sql\nto find your store-specific optional indexes.However, make sure to add these indexes back after the full sync. You can also find create-index.sql for all optional indexes at the same location."}},"/usage/aggregation-app-getting-started":{"title":"Aggregation App Getting Started","data":{"aggregation-app-getting-started#Aggregation App Getting Started":"Using yaci-store-aggregation-app, you can track account balance related data. As account balance calculation is a resource intensive task,\nyou need to run this application as a separate application.Similar to main application, place  application.properties in a folder named \"config\"\nin the same directory as the jar file. The application will automatically pick up the configuration file.Swagger UI is available at http://localhost:8081/swagger-ui.htmlThis application can be run in three modes.","mode-1---companion-mode#Mode 1 - Companion Mode":"Read UTxOs from the main database and write account balance to same database.In this mode, the aggregation app will start sync from the genesis block, but it doesn't write any UTxO data to the database.\nIt will only write account balance related data to the database. But it will read UTxOs from the database to calculate account balance.\nSo, you need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.Note: Since this application depends on the main database, it needs to be run after the main application has been started for some time.\nRun aggregation application.\njava -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -jar yaci-store-aggregation-app-<version>.jar","mode-2---standalone-mode#Mode 2 - Standalone Mode":"Write UTxOs and account balance related data to a separate database.In this mode, the aggregation app will start sync from the genesis block and write UTxOs and account balance related data\nto a separate database instead of the main database. So, you don't need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.This mode needs an additional configuration file named application-aggr.properties. You can download this\nfile from download section.Similar to main application, place both  application.properties and application-aggr.properties in a folder named \"config\"\nin the same directory as the jar file. The application will automatically pick up the configuration file.\nEdit datasource properties in application.properties file to point to a separate database.\nEdit application-aggr.properties file to enable flyway migration for the new database.\nMake sure the only following properties are uncommented in application-aggr.properties file.\nstore.account.enabled=true\nstore.extensions.utxo-storage-type=default\nspring.flyway.locations=classpath:db/store/{vendor}\nspring.flyway.out-of-order=true\nlogging.file.name=./logs/yaci-store-aggr.log\nRun aggregation application with aggr profile.\njava -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar","mode-3---standalone-mode-with-rocksdb-utxo-storage-experimental#Mode 3 - Standalone Mode with RocksDB Utxo Storage (Experimental)":"Write UTxOs to embedded RocksDB storage and account balance related data to a separate database.In this mode, the aggregation app will start sync from the genesis block and write UTxOs to an embedded RocksDB storage\nand account balance related data to a separate database instead of the main database. So, you don't need to run this application along with yaci-store-all or yaci-store-utxo-indexer application.This mode needs an additional configuration file named application-aggr.properties. You can download this\nfile from download section.Similar to main application, place both  application.properties and application-aggr.properties in a folder named \"config\"\nEdit datasource properties in application.properties file to point to a separate database.\nEdit application-aggr.properties file to enable flyway migration for the new database.\nMake sure the only following properties are uncommented in application-aggr.properties file.\nstore.account.enabled=true\nspring.flyway.locations=classpath:db/store/{vendor}\nspring.flyway.out-of-order=true\nlogging.file.name=./logs/yaci-store-aggr.log\nstore.rocksdb.base-dir=./rocksdb\nstore.extensions.utxo-storage-type=rocksdb\nstore.extensions.rocksdb-utxo-storage.write-batch-size=3000\nstore.extensions.rocksdb-utxo-storage.parallel-write=true\nRun aggregation application with aggr profile.\njava -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar\nTo clean account balance records from the database and start from the genesis block, use the following property.\njava -Dstore.aggr.clean-db-before-start=true -Dspring.profiles.active=aggr -jar yaci-store-aggregation-app-<version>.jar"}},"/usage/getting-started-out-of-box":{"title":"Getting Started Out of Box","data":{"use-out-of-the-box-applications#Use out-of-the-box applications":"Yaci Store comes with few applications that you can use out-of-the-box. These applications are designed to be used as-is.\nyaci-store-all: This application bundles all available modules/stores into a single application. If you want to index all available data, this is the application you want.\nyaci-store-utxo-indexer: This application contains utxo store,  protocolparams store and submit module If you want a utxo indexer with transaction submission capability, this is the application you want.\nyaci-store-aggregation-app: This application handles aggregation tasks like account balance calculation. This can be run as a separate application to calculate address balances.\nFor steps to run this application, please refer to Aggregation App Getting Started section.\nThe Jar files for these applications are available in the release section.","run-yaci-store-all-or-yaci-store-utxo-indexer#Run Yaci Store All or Yaci Store Utxo Indexer":"","configuration#Configuration":"Download the application.properties file from the release section and place it in a folder named \"config\" in the same directory as the jar file.\nThe application will automatically pick up the configuration file.Update configuration file with your own values. Some of the key properties are mentioned below.","mandatory-configuration#Mandatory Configuration":"","network-configuration#Network Configuration":"store.cardano.host=preprod-node.world.dev.cardano.org\nstore.cardano.port=30000\nstore.cardano.protocol-magic=1","database-configuration#Database Configuration":"Uncomment and edit the following properties to configure the database connection.\nspring.datasource.url=\nspring.datasource.username=user\nspring.datasource.password=\nAdditional configurations for database connection pool and batch insert.\nspring.datasource.hikari.maximum-pool-size=50\nspring.datasource.hikari.minimum-idle=5\nspring.jpa.properties.hibernate.jdbc.batch_size=100\nspring.jpa.properties.hibernate.order_inserts=true","parallel-processing-configuration#Parallel Processing Configuration":"The following properties are used to configure parallel processing. You can leave them as-is or change them based on\nyour machine configuration.Note: If you are using parallel processing, you also need to configure the database connection pool size accordingly.\nstore.executor.enable-parallel-processing=true\nstore.executor.blocks-batch-size=200\nstore.executor.blocks-partition-size=10\nstore.executor.use-virtual-thread-for-batch-processing=true\nstore.executor.use-virtual-thread-for-event-processing=true","optional-configuration#Optional Configuration":"The followings are optional configuration. You can leave them as-is and jump to the next section Running the application","genesis-files-configuration-for-custom-networks#Genesis files Configuration for custom networks":"This is only required if you are using any custom networks. For following public networks, the genesis files are already available in the application.\nmainnet\npreprod\npreview\nsanchonet\nConfigure genesis files location for custom network\nstore.cardano.byron-genesis-file=/Users/xyz/cardano-node/files/byron-genesis.json\nstore.cardano.shelley-genesis-file=/Users/xyz/cardano-node/files/shelley-genesis.json\nstore.cardano.alonzo-genesis-file=/Users/xyz/work/cardano-node/preprod/files/alonzo-genesis.json\nstore.cardano.conway-genesis-file=/Users/xyz/work/cardano-node/preprod/files/conway-genesis.json","n2c-configuration#N2C Configuration":"The following properties are required for node-to-client (n2c) communication. This is required for transaction submission,\nfetching protocol parameters etc. If you don't need these functionalities, you can leave them as-is.\n#store.cardano.n2c-node-socket-path=/Users/satya/work/cardano-node/preprod-8.1.2/db/node.socket\n# If you are accessing n2c through a relay like \"socat\", uncomment and edit the following properties.\n#store.cardano.n2c-host=<relay_host>\n#store.cardano.n2c-port=<relay_port>","enable--disable-specific-store#Enable / Disable specific store":"Even if you are using yaci-store-all application, you can enable/disable specific stores. For example, if you want to disable utxo store, you can do so by setting the following property to false.\nstore.utxo.enabled=false\nThis property is available for all stores.\nstore.<store_name></store_name>.enabled=false","starting-from-a-specific-point#Starting from a specific point":"By default, sync starts from the genesis block. If you want to start from a specific point, you can do so by setting the following property.\nstore.cardano.sync-start-slot=2738868\nstore.cardano.sync-start-blockhash=\n# For Byron block as start  point\n#store.cardano.sync-start-byron-block-number=2737340\n# For stop point\n#store.cardano.sync-stop-slot=76667163\n#store.cardano.sync-stop-blockhash=","run-as-jar#Run As Jar":"For Yaci Store All, use the following command.\njava -jar yaci-store-all-<version>.jar\nFor Yaci Store Utxo Indexer, use the following command.\njava -jar yaci-store-utxo-indexer-<version>.jar","swagger-ui#Swagger UI":"By default, swagger UI for the application is available at http://localhost:8080/swagger-ui/index.html","db-indexes-after-initial-sync#DB Indexes (After Initial Sync)":"During the initial sync with the yaci-store-all or yaci-store-utxo-indexer apps, the app automatically removes all optional DB indexes\nto speed up the sync process. Once the sync is completed, you need to manually re-apply those missing indexes for faster queries.The SQL file of indexes that need to be re-applied can be found in the GitHub repository:\nYaci Store All App : create-index.sql\nUtxo Indexer App   : create-index.sql"}}}