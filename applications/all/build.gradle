import org.gradle.internal.os.OperatingSystem

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'org.graalvm.buildtools.native' version "${graalvmBuildToolVersion}"
    id "com.gorylenko.gradle-git-properties" version "${gradleGitPropertiesVersion}"
}

dependencies {
    implementation project(':starters:spring-boot-starter')
    implementation project(':starters:utxo-spring-boot-starter')
    implementation project(':starters:transaction-spring-boot-starter')
    implementation project(':starters:script-spring-boot-starter')
    implementation project(':starters:metadata-spring-boot-starter')
    implementation project(':starters:assets-spring-boot-starter')
    implementation project(':starters:blocks-spring-boot-starter')
    implementation project(':starters:epoch-spring-boot-starter')
    implementation project(':starters:staking-spring-boot-starter')
    implementation project(':starters:mir-spring-boot-starter')
    implementation project(':starters:live-spring-boot-starter')
    implementation project(':starters:submit-spring-boot-starter')
    implementation project(':starters:governance-spring-boot-starter')
    implementation project(':starters:account-spring-boot-starter')
    implementation project(':starters:epoch-aggr-spring-boot-starter')

    implementation project(':starters:admin-spring-boot-starter')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation libs.spring.boot.admin.client

    runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'
    runtimeOnly 'org.postgresql:postgresql:42.7.1'

}

graalvmNative {
    binaries {
        main {
            imageName = 'yaci-store'
            buildArgs = ['-H:+ReportExceptionStackTraces',  '-H:Class=com.bloxbean.cardano.yaci.store.app.YaciStoreApplication']
            sharedLibrary = false

            def os = OperatingSystem.current()
            def vendor = System.getProperty('java.vendor')
            def version = System.getProperty('java.version')
            def vmName = System.getProperty('java.vm.name')

            // Check for Oracle GraalVM
            if (vendor.contains("Oracle") && !vmName.contains("Community")) {
                // Oracle GraalVM detected, set GC to G1 for Linux systems
                if (os.isLinux()) {
                    buildArgs.add('--gc=G1')
                    println "Oracle GraalVM detected, setting GC to G1"
                } else {
                   //use default
                    println "Oracle GraalVM detected, setting GC to default"
                }
            }

            // Check for Liberica NIK
            else if (vendor.contains("BellSoft") || vendor.contains("Liberica")) {
                // Liberica NIK detected, set GC to parallel for all environments
                buildArgs.add('--gc=parallel')
                println "Liberica NIK detected, setting GC to parallel"
            }
        }
    }

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(org.springframework.boot.gradle.tasks.aot.ProcessAot) {
    args = ["--spring.profiles.active=" + (project.properties["profile"] ?: "")]
}

task cliZip(type: Zip) {
    def profile = project.properties["profile"] ?: ""

    def zipDirName = profile == ""? "yaci-store-${project.version}" : "yaci-store-${project.version}-${profile}"
    def configDir = "config"

    from('build/native/nativeCompile') {
        include 'yaci-store*'
        into(zipDirName)
    }

    from('../../') {
        into(zipDirName)
        include 'LICENSE'
    }

    from('../../config') {
        include 'application.properties'
        into zipDirName + '/' + configDir
    }


    archiveFileName = "yaci-store-${project.version}.zip"

    //If profile is n2c, then add n2c to the archive file name
    if (profile == "n2c") {
        archiveFileName = "yaci-store-${project.version}-${profile}.zip"
    }

    destinationDirectory = file("build/output")
}

cliZip.dependsOn nativeCompile

gitProperties {
    failOnNoGitDirectory = false
}
